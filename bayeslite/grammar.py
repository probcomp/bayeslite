# -*- Python -*-

# Driver template for the LEMON parser generator.
# The author disclaims copyright to this source code.


# First off, define the token values.  These constants (all generated
# automatically by the parser generator) specify the various kinds of
# tokens (terminals) that the parser understands.
#
# Each symbol here is a terminal symbol in the grammar.

T_SEMI                         =  1
K_BEGIN                        =  2
K_ROLLBACK                     =  3
K_COMMIT                       =  4
K_CREATE                       =  5
K_TABLE                        =  6
K_AS                           =  7
K_FROM                         =  8
K_DROP                         =  9
K_ALTER                        = 10
T_COMMA                        = 11
K_RENAME                       = 12
K_TO                           = 13
K_COLUMN                       = 14
L_STRING                       = 15
K_GUESS                        = 16
K_SCHEMA                       = 17
K_FOR                          = 18
K_POPULATION                   = 19
T_LROUND                       = 20
T_LCURLY                       = 21
T_RROUND                       = 22
T_RCURLY                       = 23
K_WITH                         = 24
K_SET                          = 25
K_STATTYPES                    = 26
K_STATTYPE                     = 27
K_OF                           = 28
K_ADD                          = 29
K_VARIABLE                     = 30
K_IGNORE                       = 31
L_NAME                         = 32
T_STAR                         = 33
K_GENERATOR                    = 34
K_USING                        = 35
ANY                            = 36
K_INITIALIZE                   = 37
L_INTEGER                      = 38
K_ANALYZE                      = 39
K_TEMP                         = 40
K_TEMPORARY                    = 41
K_IF                           = 42
K_EXISTS                       = 43
K_NOT                          = 44
T_MINUS                        = 45
K_OR                           = 46
K_CHECKPOINT                   = 47
K_ITERATION                    = 48
K_ITERATIONS                   = 49
K_MINUTE                       = 50
K_MINUTES                      = 51
K_SECOND                       = 52
K_SECONDS                      = 53
K_REGRESS                      = 54
K_GIVEN                        = 55
K_BY                           = 56
K_WITHIN                       = 57
K_SELECT                       = 58
K_ESTIMATE                     = 59
K_COLUMNS                      = 60
K_PAIRWISE                     = 61
K_ROW                          = 62
K_INFER                        = 63
K_EXPLICIT                     = 64
K_CONFIDENCE                   = 65
K_PREDICT                      = 66
K_SIMULATE                     = 67
T_EQ                           = 68
K_MODELS                       = 69
K_DISTINCT                     = 70
K_ALL                          = 71
T_DOT                          = 72
K_VARIABLES                    = 73
K_MODELED                      = 74
K_MODELLED                     = 75
K_WHERE                        = 76
K_MODEL                        = 77
K_GROUP                        = 78
K_HAVING                       = 79
K_ORDER                        = 80
K_ASC                          = 81
K_DESC                         = 82
K_ACCURACY                     = 83
K_LIMIT                        = 84
K_OFFSET                       = 85
K_AND                          = 86
K_IS                           = 87
K_LIKE                         = 88
K_ESCAPE                       = 89
K_GLOB                         = 90
K_REGEXP                       = 91
K_MATCH                        = 92
K_BETWEEN                      = 93
K_IN                           = 94
K_ISNULL                       = 95
K_NOTNULL                      = 96
T_NEQ                          = 97
T_LT                           = 98
T_LEQ                          = 99
T_GEQ                          = 100
T_GT                           = 101
T_BITAND                       = 102
T_BITIOR                       = 103
T_LSHIFT                       = 104
T_RSHIFT                       = 105
T_PLUS                         = 106
T_SLASH                        = 107
T_PERCENT                      = 108
T_CONCAT                       = 109
K_COLLATE                      = 110
T_BITNOT                       = 111
K_PREDICTIVE                   = 112
K_PROBABILITY                  = 113
K_DENSITY                      = 114
K_VALUE                        = 115
K_SIMILARITY                   = 116
K_RELEVANCE                    = 117
K_DEPENDENCE                   = 118
K_MUTUAL                       = 119
K_INFORMATION                  = 120
K_EXISTING                     = 121
K_ROWS                         = 122
K_HYPOTHETICAL                 = 123
K_VALUES                       = 124
K_CORRELATION                  = 125
K_PVALUE                       = 126
K_THE                          = 127
K_CONTEXT                      = 128
K_SAMPLES                      = 129
L_NUMPAR                       = 130
L_NAMPAR                       = 131
K_CAST                         = 132
K_CASE                         = 133
K_END                          = 134
K_WHEN                         = 135
K_THEN                         = 136
K_ELSE                         = 137
K_NULL                         = 138
L_FLOAT                        = 139
K_BTABLE                       = 140
K_CONF                         = 141
K_DEFAULT                      = 142
K_LATENT                       = 143
K_UNSET                        = 144

# The state of the parser is completely contained in an instance of
# the following class.

class Parser(object):

    # defaults
    YYERRORSYMBOL = None
    YYWILDCARD = None

    # The next thing included is series of definitions which control
    # various aspects of the generated parser.
    #    YYNOCODE           is a number which corresponds
    #                       to no legal terminal or nonterminal number.  This
    #                       number is used to fill in empty slots of the hash 
    #                       table.
    #    YYNSTATE           the combined number of states.
    #    YYNRULE            the number of rules in the grammar
    #    YYERRORSYMBOL      is the code number of the error symbol.  If not
    #                       defined, then do no error processing.

    YYNOCODE = 271
    YYWILDCARD = 36
    YYNSTATE = 731
    YYNRULE = 342
    YYERRORSYMBOL = 145
    YY_NO_ACTION     = YYNSTATE + YYNRULE + 2
    YY_ACCEPT_ACTION = YYNSTATE + YYNRULE + 1
    YY_ERROR_ACTION  = YYNSTATE + YYNRULE


    # Next are that tables used to determine what action to take based on the
    # current state and lookahead token.  These tables are used to implement
    # functions that take a state number and lookahead value and return an
    # action integer.  
    #
    # Suppose the action integer is N.  Then the action is determined as
    # follows
    #
    #   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
    #                                      token onto the stack and goto state N.
    #
    #   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
    #
    #   N == YYNSTATE+YYNRULE              A syntax error has occurred.
    #
    #   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
    #
    #   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
    #                                      slots in the yy_action[] table.
    #
    # The action table is constructed as a single large table named yy_action[].
    # Given state S and lookahead X, the action is computed as
    #
    #      yy_action[ yy_shift_ofst[S] + X ]
    #
    # If the index value yy_shift_ofst[S]+X is out of range or if the value
    # yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
    # is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
    # and that yy_default[S] should be used instead.  
    #
    # The formula above is for computing the action when the lookahead is
    # a terminal symbol.  If the lookahead is a non-terminal (as occurs after
    # a reduce action) then the yy_reduce_ofst[] array is used in place of
    # the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
    # YY_SHIFT_USE_DFLT.
    #
    # The following are the tables generated in this section:
    #
    #  yy_action[]        A single table containing all actions.
    #  yy_lookahead[]     A table containing the lookahead for each entry in
    #                     yy_action.  Used to detect hash collisions.
    #  yy_shift_ofst[]    For each state, the offset into yy_action for
    #                     shifting terminals.
    #  yy_reduce_ofst[]   For each state, the offset into yy_action for
    #                     shifting non-terminals after a reduce.
    #  yy_default[]       Default action for each state.

    YY_ACTTAB_COUNT = 3152
    yy_action = [
          410,  294,  238,  451,   67,   66,   65,   64,  640,  646, #     0
           81,  592,  591,    3,    5,  292,  730,   77,  451,  506, #    10
          729,  728,  727,  432,  646,  368,  547,  547,  499,  703, #    20
          700,  642,  237,   59,  288,   58,  462,   56,   54,   52, #    30
           50,  411,   67,   66,   65,   64,  722,  721,  720,  719, #    40
          718,  717,  716,  715,  407,  183,  147,  451,   78,  230, #    50
           98,   33,  486,  646,    8,   49,  905,  673,  722,  721, #    60
          720,  719,  718,  717,  716,  715,  634,   67,   66,   65, #    70
           64,   33,  673,  504,   80,   79,   35,  409,  503,  494, #    80
          693,  296,  326,  324,  361,  335,  483,  492,  708,  704, #    90
          722,  721,  720,  719,  718,  717,  716,  715,  446,  491, #   100
           37,  451,  681,  707,  704,  278,  451,  646,  108,  277, #   110
          444,  673,  646,  680,  679,  468,   14,  681,  690,   29, #   120
          634,  643,  641,   71,   70,   69,   68,  504,   82,  561, #   130
          561,  406,  503,  494,  693,  296,  326,  324,  361,  335, #   140
          483,  492,  708,  704,  722,  721,  720,  719,  718,  717, #   150
          716,  715,   57,  451,  108,  640,  681,   47,  229,  646, #   160
            3,   67,   66,   65,   64,  673,   67,   66,   65,   64, #   170
          673,  155,  368,  221,  447,  549,  549,  654,  642,  540, #   180
          540,   17,  671,  462,   36,   86,  503,  494,  693,  296, #   190
          326,  324,  361,  335,  483,  492,  708,  704,  183,  147, #   200
          500,  708,  704,   98,  366,  430,  267,    8,  709,  640, #   210
          681,  355,  616,  442,    3,  681,  654,  673,  430,  511, #   220
          511,  510,  510,  509,  509,  709,  368,  403,  484,  703, #   230
          631,   55,  642,  145,  111,  156,   13,  462,   36,   86, #   240
           67,   66,   65,   64,  429,  153,   85,  666,  706,  704, #   250
          112,   87,  365,  363,   75,   18,  158,  429,  475,  473, #   260
          267,    4,  681,   92,   11,  157,  703,  651,  131,  640, #   270
          680,  679,  468,   14,    3,  703,   41,  486,  643,  641, #   280
          703,  243,  243,  787,   95,   95,  368,  652,   67,   66, #   290
           65,   64,  642,  787,  478,  451,  486,  462,   36,   86, #   300
           85,  646,  291,  486,  132,   87,  365,  363,  208,  111, #   310
          158,  486,  475,  473,  175,  619,  451,   13,  544,  157, #   320
          267,  203,  646,  640,  680,  679,  468,   14,    3,  486, #   330
          183,  147,  643,  641,  254,   98,  199,    7,   53,    8, #   340
          368,  652,  487,  691,   63,  440,  642,   67,   66,   65, #   350
           64,  462,   36,   86,   72,  658,  703,  700,   83,  673, #   360
           85,  487,  691,  659,  439,   87,  365,  363,  487,  691, #   370
          158,  436,  475,  473,  249,  669,  460,  691,  245,  157, #   380
          472,   99,  463,  640,  680,  679,  468,   14,    3,  613, #   390
          705,  704,  643,  641,  487,  691,  555,  433,  793,  699, #   400
          368,  291,  345,  545,  681,  383,  642,  291,  497,  793, #   410
          793,  462,   61,   86,   85,   73,   77,  544,  343,   87, #   420
          365,  363,  381,  544,  158,  681,  475,  473,  703,  700, #   430
          486,   94,   94,  157,  267,  185,  185,  640,  680,  679, #   440
          468,   14,    3,  464,  278,  215,  643,  641,  277,  223, #   450
          388,  387,  662,  451,  368,  451,  397,  397,  213,  646, #   460
          642,  646,  166,  654,  137,  462,   36,   86,  380,  521, #   470
          144,  346,  337,  211,   85,  586,  714,  129,  703,   87, #   480
          365,  363,  226,  111,  158,  332,  475,  473,  267,  713, #   490
          597,  551,  111,  157,  702,  351,  691,  640,  680,  679, #   500
          468,   14,    3,  424,  486,   12,  643,  641,  658,  382, #   510
          382,  111,  792,  289,  368,  516,  659,  674,  699,  489, #   520
          642,  291,  589,  792,  792,  462,  232,   86,   85,  513, #   530
          555,  417,  298,   87,  365,  363,  396,  544,  158,  232, #   540
          475,  473,  584,  289,  255,  514,  176,  157,  267,  236, #   550
          692,  704,  680,  679,  468,   14,   39,  478,  111,  513, #   560
          643,  641,  681,  217,  681,  226,  454,  111,  331,  349, #   570
          691,   16,  646,  699,  551,   38,   60,  656,   48,   46, #   580
           44,   42,  408,  576,  575,   40,  111,  224,   85,  225, #   590
          159,  352,  137,   87,  365,  363,  122,  444,  158,  622, #   600
          475,  473,  402,  585,  565,  555,  224,  157,  201,  597, #   610
          226,  393,  680,  679,  468,   14,  554,  569,  261,  560, #   620
          643,  641,  451,  592,  591,  142,  356,  330,  646,  520, #   630
          673,  623,  626,  731,  451,  726,  725,  724,  148,  258, #   640
          646,  451,  141,  329,  456,  456,  333,  646,   27,  377, #   650
           25,  503,  494,  693,  296,  326,  324,  361,  335,  483, #   660
          492,  708,  704,   13,  597,  101,  695,  694,   13,   51, #   670
          375,  416,  194,  421,  186,  681,  392,  392,   67,   66, #   680
           65,   64,  451,  140,  140,  119,  673,  187,  646,  118, #   690
          611,  183,  147,  206,  531,  180,   98,  488,  435,  618, #   700
            8,  654,   84,  495,  602,  673,  698,  503,  494,  693, #   710
          296,  326,  324,  361,  335,  483,  492,  708,  704,  713, #   720
          466,  454,  459,  662,  359,  386,  530,  646,  678,  605, #   730
          704,  681,  628,  451,  501,  492,  708,  704,  455,  646, #   740
          273,  713,   45,  681,  629,  713,  673,   43,  523,  144, #   750
          681,   67,   66,   65,   64,  634,   67,   66,   65,   64, #   760
          182,  614,  504,  525,  526,  255,  404,  503,  494,  693, #   770
          296,  326,  324,  361,  335,  483,  492,  708,  704,  452, #   780
          341,  662,  121,  454,   93,  673,  555,  637,  723,  646, #   790
          354,  681,  342,  451,  258,  469,  469,  673,  137,  646, #   800
          372,  662,  703,  631,  248,  256,  503,  494,  693,  296, #   810
          326,  324,  361,  335,  483,  492,  708,  704,   32,  614, #   820
          632,   31,  146,  327,  361,  335,  483,  492,  708,  704, #   830
          681,  614,  168,  233,  722,  721,  720,  719,  718,  717, #   840
          716,  715,  681,   74,  481,  102,  699,  673,  480,  637, #   850
          123,  193,  378,  384,  524,  566,  258,  673,  454,   30, #   860
          615, 1074,   62,  279,  646,  699,  699,  477,  503,  494, #   870
          693,  296,  326,  324,  361,  335,  483,  492,  708,  704, #   880
          711,  296,  326,  324,  361,  335,  483,  492,  708,  704, #   890
          476,  395,  681,  110,  179,  682,  276,  357,  178,  272, #   900
           15,   88,  681,  703,   28,  135,  668,  672,  670,   76, #   910
          454,  667,  425,  663,  261,  457,  646,  660,  443,  260, #   920
          259,  699,  673,  154,  637,  647,  650,  257,  645,  451, #   930
          610,  258,   26,  636,  621,  646,  620,  498,  106,  425, #   940
          117,   22,   23,  503,  494,  693,  296,  326,  324,  361, #   950
          335,  483,  492,  708,  704,  244,  701,  687,  722,  721, #   960
          720,  719,  718,  717,  716,  715,  607,  681,  438,   91, #   970
          437,  454,  606,   90,  673,  627,  626,  646,  434,  604, #   980
          448,  603,   21,  258,  241,  722,  721,  720,  719,  718, #   990
          717,  716,  715,  673,  334,  503,  494,  693,  296,  326, #  1000
          324,  361,  335,  483,  492,  708,  704,  239,  595,  594, #  1010
          340,  451,  597,  593,  590,  423,   96,  646,  116,  681, #  1020
          367,  335,  483,  492,  708,  704,  722,  721,  720,  719, #  1030
          718,  717,  716,  715,  419,  673,  234,  637,  681,  104, #  1040
           20,  420,  415,  582,  258,   19,  418,    2,  581,  115, #  1050
          580,  579,  578,    1,  228,  399,  503,  494,  693,  296, #  1060
          326,  324,  361,  335,  483,  492,  708,  704,  577,  574, #  1070
          573,  451,  231,  572,  224,  673,  453,  646,  562,  553, #  1080
          681,  130,  394,  552,  634,  550,  538,  220,  209,  207, #  1090
          204,  504,  151,  127,  200,  405,  503,  494,  693,  296, #  1100
          326,  324,  361,  335,  483,  492,  708,  704,  451,  202, #  1110
          125,  198,  376,  124,  646,  451,  188,  161,  197,  195, #  1120
          681,  646,  722,  721,  720,  719,  718,  717,  716,  715, #  1130
          370,    6,  171,  428,  427,  673,  143,  287,  150,  149, #  1140
          369,  152,  566,  285,  180,  400,  284,   24,  139,  451, #  1150
          470,  282,  173,  697,  496,  646,  503,  494,  693,  296, #  1160
          326,  324,  361,  335,  483,  492,  708,  704,  274,  685, #  1170
          478,  281,  673,  280,  703,  138,  688,  474,  684,  673, #  1180
          681,  634,  401,  445,  683,   89,  451,  471,  360,  654, #  1190
          270,  268,  646,  503,  494,  693,  296,  326,  324,  361, #  1200
          335,  483,  492,  708,  704,  325,  361,  335,  483,  492, #  1210
          708,  704,  451,  673,  256,  177,  266,  681,  646,  469, #  1220
          451,  269,  136,  263,  681,  107,  646,  262,  722,  721, #  1230
          720,  719,  718,  717,  716,  715,  264,   34,  321,  324, #  1240
          361,  335,  483,  492,  708,  704,  454,  664,  461,  661, #  1250
          673,  458,  646,  656,  657,  172,  452,  648,  681,  251, #  1260
          630,  635,  649,  451,  246,  170,  120,  250,  624,  646, #  1270
          133,   97,  612,  598,  609,  169,  673,  625,  338,  483, #  1280
          492,  708,  704,  252,  673,  638,  601,  240,  596,  426, #  1290
          451,  293,  422,  413,  247,  681,  646,  503,  494,  693, #  1300
          296,  326,  324,  361,  335,  483,  492,  708,  704,  421, #  1310
          673,  105,  653,  493,  492,  708,  704,  235,  350,  258, #  1320
          563,  681,  564,  295,  167,  347,  227,  673,  391,  681, #  1330
          558,  503,  494,  693,  296,  326,  324,  361,  335,  483, #  1340
          492,  708,  704,  451,  559,  568,  567,  557,  556,  646, #  1350
          222,  165,  344,  219,  673,  681,  485,  492,  708,  704, #  1360
          164,  451,  218,  348,  543,  587,  542,  646,  583,  216, #  1370
          163,  214,  681,  389,  539,  503,  494,  693,  296,  326, #  1380
          324,  361,  335,  483,  492,  708,  704,  212,  537,  210, #  1390
          536,  535,  128,  534,  451,  162,  533,  385,  114,  681, #  1400
          646,  532,  522,  527,  109,  528,  126,  673,  519,  374, #  1410
          189,  518,  192,  190,  290,  512,  712,  113,  517,  191, #  1420
          297,  371,   10,  160,  686,  673,  275,  174,  503,  494, #  1430
          693,  296,  326,  324,  361,  335,  483,  492,  708,  704, #  1440
          451,  373,  508,  507,  339,  134,  646,  696,  450,  675, #  1450
          398,  100,  681,  336,  483,  492,  708,  704,  673,  283, #  1460
          390,  286,  271,  265,  655,  253,  242,  548,  588,  541, #  1470
          681,  205,  196,  184,  451,  490,  608,  599,  676,  529, #  1480
          646,  358,  546,  308,  324,  361,  335,  483,  492,  708, #  1490
          704,  515,  465,  505,  181,  103,  600,    9,  665,  379, #  1500
         1075, 1075, 1075,  681,  673, 1075, 1075, 1075, 1075,  451, #  1510
         1075, 1075, 1075,  689, 1075,  646, 1075, 1075, 1075, 1075, #  1520
         1075, 1075, 1075, 1075, 1075,  503,  494,  693,  296,  326, #  1530
          324,  361,  335,  483,  492,  708,  704, 1075,  673, 1075, #  1540
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  482, 1075,  681, #  1550
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  503, #  1560
          494,  693,  296,  326,  324,  361,  335,  483,  492,  708, #  1570
          704,  451, 1075,  673, 1075, 1075, 1075,  646, 1075, 1075, #  1580
         1075, 1075,  479,  681, 1075, 1075, 1075, 1075, 1075, 1075, #  1590
         1075, 1075, 1075, 1075,  503,  494,  693,  296,  326,  324, #  1600
          361,  335,  483,  492,  708,  704, 1075, 1075, 1075, 1075, #  1610
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  681, 1075, #  1620
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1630
         1075, 1075, 1075, 1075, 1075,  673, 1075, 1075, 1075, 1075, #  1640
         1075, 1075, 1075, 1075,  677, 1075, 1075, 1075, 1075, 1075, #  1650
         1075, 1075, 1075, 1075, 1075, 1075,  503,  494,  693,  296, #  1660
          326,  324,  361,  335,  483,  492,  708,  704,  451, 1075, #  1670
         1075, 1075, 1075, 1075,  646, 1075, 1075, 1075, 1075, 1075, #  1680
          681, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1690
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1700
         1075, 1075,  451, 1075, 1075, 1075, 1075, 1075,  646, 1075, #  1710
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1720
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1730
         1075, 1075,  673, 1075, 1075, 1075, 1075,  451, 1075, 1075, #  1740
         1075,  467, 1075,  646, 1075, 1075, 1075, 1075, 1075, 1075, #  1750
         1075, 1075, 1075,  503,  494,  693,  296,  326,  324,  361, #  1760
          335,  483,  492,  708,  704, 1075,  673, 1075, 1075, 1075, #  1770
         1075, 1075, 1075,  451, 1075,  449, 1075,  681, 1075,  646, #  1780
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  503,  494,  693, #  1790
          296,  326,  324,  361,  335,  483,  492,  708,  704,  451, #  1800
         1075,  673, 1075, 1075, 1075,  646, 1075, 1075, 1075, 1075, #  1810
          644,  681, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1820
         1075, 1075,  503,  494,  693,  296,  326,  324,  361,  335, #  1830
          483,  492,  708,  704, 1075, 1075, 1075,  673, 1075, 1075, #  1840
         1075, 1075, 1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, #  1850
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1860
         1075, 1075, 1075,  673,  364,  335,  483,  492,  708,  704, #  1870
         1075, 1075,  639, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1880
         1075, 1075,  681, 1075,  503,  494,  693,  296,  326,  324, #  1890
          361,  335,  483,  492,  708,  704,  451, 1075, 1075, 1075, #  1900
         1075, 1075,  646, 1075, 1075, 1075, 1075, 1075,  681, 1075, #  1910
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1920
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1930
          451, 1075, 1075, 1075, 1075, 1075,  646, 1075, 1075, 1075, #  1940
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1950
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1960
          673, 1075, 1075, 1075, 1075,  451, 1075, 1075, 1075,  633, #  1970
         1075,  646, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  1980
         1075,  503,  494,  693,  296,  326,  324,  361,  335,  483, #  1990
          492,  708,  704, 1075,  673, 1075, 1075, 1075, 1075, 1075, #  2000
         1075,  451, 1075,  617, 1075,  681, 1075,  646, 1075, 1075, #  2010
         1075, 1075, 1075, 1075, 1075,  503,  494,  693,  296,  326, #  2020
          324,  361,  335,  483,  492,  708,  704,  451, 1075,  673, #  2030
         1075, 1075, 1075,  646, 1075, 1075, 1075, 1075,  441,  681, #  2040
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2050
          503,  494,  693,  296,  326,  324,  361,  335,  483,  492, #  2060
          708,  704, 1075, 1075, 1075,  673, 1075, 1075, 1075, 1075, #  2070
         1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, 1075, 1075, #  2080
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2090
         1075,  673,  362,  335,  483,  492,  708,  704, 1075, 1075, #  2100
          431, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2110
          681, 1075,  503,  494,  693,  296,  326,  324,  361,  335, #  2120
          483,  492,  708,  704,  451, 1075, 1075, 1075, 1075, 1075, #  2130
          646, 1075, 1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, #  2140
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2150
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  451, 1075, #  2160
         1075, 1075, 1075, 1075,  646, 1075, 1075, 1075, 1075, 1075, #  2170
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2180
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  673, 1075, #  2190
         1075, 1075, 1075,  451, 1075, 1075, 1075,  414, 1075,  646, #  2200
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  503, #  2210
          494,  693,  296,  326,  324,  361,  335,  483,  492,  708, #  2220
          704, 1075,  673, 1075, 1075, 1075, 1075, 1075, 1075,  451, #  2230
         1075,  412, 1075,  681, 1075,  646, 1075, 1075, 1075, 1075, #  2240
         1075, 1075, 1075,  503,  494,  693,  296,  326,  324,  361, #  2250
          335,  483,  492,  708,  704,  451, 1075,  673, 1075, 1075, #  2260
         1075,  646, 1075, 1075, 1075, 1075,  571,  681, 1075, 1075, #  2270
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  503,  494, #  2280
          693,  296,  326,  324,  361,  335,  483,  492,  708,  704, #  2290
         1075,  451, 1075,  673, 1075, 1075, 1075,  646, 1075, 1075, #  2300
         1075, 1075,  681, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2310
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  673, #  2320
          353,  335,  483,  492,  708,  704, 1075, 1075,  570, 1075, #  2330
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  681, 1075, #  2340
          503,  494,  693,  296,  326,  324,  361,  335,  483,  492, #  2350
          708,  704,  451, 1075, 1075,  673, 1075, 1075,  646, 1075, #  2360
         1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, 1075, 1075, #  2370
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  502,  693,  296, #  2380
          326,  324,  361,  335,  483,  492,  708,  704,  451, 1075, #  2390
         1075, 1075, 1075, 1075,  646, 1075, 1075, 1075,  451, 1075, #  2400
          681, 1075, 1075, 1075,  646, 1075, 1075, 1075, 1075,  451, #  2410
         1075, 1075, 1075, 1075, 1075,  646,  673, 1075, 1075, 1075, #  2420
         1075,  451, 1075, 1075, 1075, 1075, 1075,  646, 1075, 1075, #  2430
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  710, #  2440
          296,  326,  324,  361,  335,  483,  492,  708,  704, 1075, #  2450
         1075, 1075,  673, 1075, 1075, 1075, 1075,  451, 1075, 1075, #  2460
         1075,  681,  673,  646, 1075, 1075, 1075, 1075, 1075, 1075, #  2470
         1075, 1075, 1075,  673, 1075, 1075, 1075,  320,  324,  361, #  2480
          335,  483,  492,  708,  704,  673, 1075,  307,  324,  361, #  2490
          335,  483,  492,  708,  704, 1075, 1075,  681,  319,  324, #  2500
          361,  335,  483,  492,  708,  704, 1075,  681, 1075, 1075, #  2510
          306,  324,  361,  335,  483,  492,  708,  704,  681,  451, #  2520
         1075,  673, 1075, 1075, 1075,  646, 1075, 1075, 1075, 1075, #  2530
          681, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2540
         1075, 1075, 1075, 1075, 1075, 1075,  318,  324,  361,  335, #  2550
          483,  492,  708,  704, 1075,  451, 1075, 1075, 1075, 1075, #  2560
         1075,  646, 1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, #  2570
         1075, 1075, 1075, 1075, 1075, 1075,  451, 1075, 1075, 1075, #  2580
         1075, 1075,  646,  673, 1075, 1075, 1075, 1075, 1075, 1075, #  2590
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  451, 1075, 1075, #  2600
         1075, 1075, 1075,  646, 1075, 1075, 1075, 1075,  305,  324, #  2610
          361,  335,  483,  492,  708,  704, 1075, 1075,  451,  673, #  2620
         1075, 1075, 1075, 1075,  646, 1075, 1075, 1075,  681, 1075, #  2630
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2640
          673, 1075, 1075, 1075,  317,  324,  361,  335,  483,  492, #  2650
          708,  704,  451, 1075, 1075, 1075, 1075, 1075,  646, 1075, #  2660
         1075,  673, 1075, 1075,  681,  304,  324,  361,  335,  483, #  2670
          492,  708,  704,  451, 1075, 1075, 1075, 1075, 1075,  646, #  2680
         1075, 1075,  673, 1075, 1075,  681,  316,  324,  361,  335, #  2690
          483,  492,  708,  704, 1075, 1075, 1075, 1075, 1075, 1075, #  2700
         1075, 1075, 1075, 1075, 1075, 1075,  681,  303,  324,  361, #  2710
          335,  483,  492,  708,  704, 1075,  673, 1075, 1075, 1075, #  2720
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  681, 1075, 1075, #  2730
         1075, 1075, 1075, 1075, 1075, 1075, 1075,  673, 1075, 1075, #  2740
         1075,  315,  324,  361,  335,  483,  492,  708,  704, 1075, #  2750
         1075, 1075,  451, 1075, 1075, 1075, 1075, 1075,  646, 1075, #  2760
         1075,  681,  302,  324,  361,  335,  483,  492,  708,  704, #  2770
         1075, 1075, 1075,  451, 1075, 1075, 1075, 1075, 1075,  646, #  2780
         1075, 1075,  681, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2790
         1075, 1075, 1075, 1075, 1075,  451, 1075, 1075, 1075, 1075, #  2800
         1075,  646, 1075, 1075, 1075, 1075,  451, 1075, 1075, 1075, #  2810
         1075, 1075,  646, 1075, 1075, 1075,  673, 1075, 1075, 1075, #  2820
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  451, 1075, #  2830
         1075, 1075, 1075, 1075,  646, 1075, 1075,  673, 1075, 1075, #  2840
         1075,  314,  324,  361,  335,  483,  492,  708,  704, 1075, #  2850
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  673, #  2860
         1075,  681,  301,  324,  361,  335,  483,  492,  708,  704, #  2870
          673,  451, 1075, 1075, 1075, 1075, 1075,  646, 1075, 1075, #  2880
         1075, 1075,  681, 1075,  313,  324,  361,  335,  483,  492, #  2890
          708,  704,  673, 1075, 1075,  300,  324,  361,  335,  483, #  2900
          492,  708,  704, 1075,  681, 1075, 1075,  451, 1075, 1075, #  2910
         1075, 1075, 1075,  646, 1075,  681, 1075,  312,  324,  361, #  2920
          335,  483,  492,  708,  704, 1075, 1075, 1075,  451, 1075, #  2930
         1075, 1075, 1075, 1075,  646,  673, 1075,  681, 1075, 1075, #  2940
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2950
          451, 1075, 1075, 1075, 1075, 1075,  646, 1075, 1075, 1075, #  2960
          299,  324,  361,  335,  483,  492,  708,  704, 1075, 1075, #  2970
         1075,  673, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  2980
          681, 1075, 1075,  451, 1075, 1075, 1075, 1075, 1075,  646, #  2990
         1075, 1075,  673, 1075, 1075, 1075,  311,  324,  361,  335, #  3000
          483,  492,  708,  704, 1075, 1075, 1075, 1075, 1075, 1075, #  3010
         1075, 1075, 1075, 1075,  673, 1075,  681,  310,  324,  361, #  3020
          335,  483,  492,  708,  704,  451, 1075, 1075, 1075, 1075, #  3030
         1075,  646,  451, 1075, 1075, 1075, 1075,  681,  646,  309, #  3040
          324,  361,  335,  483,  492,  708,  704,  673, 1075, 1075, #  3050
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  681, #  3060
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  3070
         1075, 1075,  328,  324,  361,  335,  483,  492,  708,  704, #  3080
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,  673, #  3090
         1075, 1075,  681, 1075, 1075, 1075,  673, 1075, 1075, 1075, #  3100
         1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, #  3110
         1075, 1075, 1075, 1075, 1075,  323,  361,  335,  483,  492, #  3120
          708,  704,  322,  361,  335,  483,  492,  708,  704, 1075, #  3130
         1075, 1075, 1075, 1075,  681, 1075, 1075, 1075, 1075, 1075, #  3140
         1075,  681, #  3150
        ]
    yy_lookahead = [
          151,   60,   61,  154,   98,   99,  100,  101,   15,  160, #     0
           33,   70,   71,   20,   20,   11,    1,   20,  154,  148, #    10
          149,  150,  151,   28,  160,   32,   22,   23,  113,   32, #    20
           33,   38,  117,   89,    6,   88,   43,   90,   91,   92, #    30
           93,   94,   98,   99,  100,  101,  197,  198,  199,  200, #    40
          201,  202,  203,  204,  151,   58,   59,  154,    7,    8, #    50
           63,   11,  160,  160,   67,   86,   72,  218,  197,  198, #    60
          199,  200,  201,  202,  203,  204,  227,   98,   99,  100, #    70
          101,   11,  218,  234,  107,  108,   46,  238,  239,  240, #    80
          241,  242,  243,  244,  245,  246,  247,  248,  249,  250, #    90
          197,  198,  199,  200,  201,  202,  203,  204,  151,  114, #   100
           86,  154,  263,  249,  250,   24,  154,  160,    1,   28, #   110
          160,  218,  160,  130,  131,  132,  133,  263,  226,   79, #   120
          227,  138,  139,  102,  103,  104,  105,  234,  109,   22, #   130
           23,  238,  239,  240,  241,  242,  243,  244,  245,  246, #   140
          247,  248,  249,  250,  197,  198,  199,  200,  201,  202, #   150
          203,  204,   89,  154,    1,   15,  263,   89,   19,  160, #   160
           20,   98,   99,  100,  101,  218,   98,   99,  100,  101, #   170
          218,   11,   32,   34,  227,   22,   23,   32,   38,   40, #   180
           41,   11,   22,   43,   44,   45,  239,  240,  241,  242, #   190
          243,  244,  245,  246,  247,  248,  249,  250,   58,   59, #   200
          248,  249,  250,   63,  110,   60,   66,   67,   15,   15, #   210
          263,  261,  262,   13,   20,  263,   32,  218,   73,   48, #   220
           49,   50,   51,   52,   53,   32,   32,   33,   28,   32, #   230
           33,   89,   38,    8,   11,   20,   11,   43,   44,   45, #   240
           98,   99,  100,  101,   60,   61,  106,   32,  249,  250, #   250
           28,  111,  112,  113,   20,   85,  116,   73,  118,  119, #   260
           66,   64,  263,   20,   70,  125,   32,   33,   20,   15, #   270
          130,  131,  132,  133,   20,   32,   86,  160,  138,  139, #   280
           32,   56,   57,    1,   20,   21,   32,   33,   98,   99, #   290
          100,  101,   38,   11,   94,  154,  160,   43,   44,   45, #   300
          106,  160,   20,  160,   11,  111,  112,  113,    6,   86, #   310
          116,  160,  118,  119,    8,   22,  154,   11,   36,  125, #   320
           66,   19,  160,   15,  130,  131,  132,  133,   20,  160, #   330
           58,   59,  138,  139,    8,   63,   34,   11,   89,   67, #   340
           32,   33,  225,  226,   20,  228,   38,   98,   99,  100, #   350
          101,   43,   44,   45,   45,   69,   32,   33,  115,  218, #   360
          106,  225,  226,   77,  228,  111,  112,  113,  225,  226, #   370
          116,  228,  118,  119,   66,   38,  225,  226,   11,  125, #   380
          218,   20,   45,   15,  130,  131,  132,  133,   20,   22, #   390
          249,  250,  138,  139,  225,  226,  160,  228,   11,  160, #   400
           32,   20,  166,   22,  263,   12,   38,   20,   55,   22, #   410
           23,   43,   44,   45,  106,  106,   20,   36,   25,  111, #   420
          112,  113,   29,   36,  116,  263,  118,  119,   32,   33, #   430
          160,   20,   21,  125,   66,   56,   57,   15,  130,  131, #   440
          132,  133,   20,  106,   24,    6,  138,  139,   28,   18, #   450
          187,  188,  189,  154,   32,  154,   26,   27,   19,  160, #   460
           38,  160,   16,   32,   11,   43,   44,   45,  176,  177, #   470
          178,   25,  233,   34,  106,   22,  210,   31,   32,  111, #   480
          112,  113,  160,   11,  116,  163,  118,  119,   66,  223, #   490
          251,  169,   11,  125,   22,  225,  226,   15,  130,  131, #   500
          132,  133,   20,   22,  160,   56,  138,  139,   69,   26, #   510
           27,   11,   11,   20,   32,   22,   77,  218,  160,  218, #   520
           38,   20,   22,   22,   23,   43,  154,   45,  106,   36, #   530
          160,   11,   44,  111,  112,  113,  166,   36,  116,  154, #   540
          118,  119,   22,   20,  160,   22,  126,  125,   66,   86, #   550
          249,  250,  130,  131,  132,  133,   68,   94,   86,   36, #   560
          138,  139,  263,   18,  263,  160,  154,   86,  163,  225, #   570
          226,   11,  160,  160,  169,   87,   88,   32,   90,   91, #   580
           92,   93,   94,   95,   96,   97,   86,   11,  106,   13, #   590
           28,  233,   11,  111,  112,  113,  212,  160,  116,  215, #   600
          118,  119,  230,   22,  232,  160,   11,  125,   13,  251, #   610
          160,  166,  130,  131,  132,  133,  171,  232,   11,  169, #   620
          138,  139,  154,   70,   71,  178,  214,  180,  160,   22, #   630
          218,  219,  220,    0,  154,    2,    3,    4,    5,  227, #   640
          160,  154,    9,   10,   74,   75,  233,  160,  135,   16, #   650
          137,  239,  240,  241,  242,  243,  244,  245,  246,  247, #   660
          248,  249,  250,   11,  251,    8,   81,   82,   11,   89, #   670
           37,  121,   39,  123,   22,  263,   26,   27,   98,   99, #   680
          100,  101,  154,   20,   21,   24,  218,   54,  160,   28, #   690
          160,   58,   59,   13,   14,  227,   63,   55,  218,  262, #   700
           67,   32,   68,  235,  236,  218,  210,  239,  240,  241, #   710
          242,  243,  244,  245,  246,  247,  248,  249,  250,  223, #   720
          264,  154,  188,  189,  268,  157,  158,  160,  210,  249, #   730
          250,  263,  210,  154,  247,  248,  249,  250,   69,  160, #   740
          213,  223,   89,  263,  217,  223,  218,   89,  177,  178, #   750
          263,   98,   99,  100,  101,  227,   98,   99,  100,  101, #   760
          193,  160,  234,  167,  168,  160,  238,  239,  240,  241, #   770
          242,  243,  244,  245,  246,  247,  248,  249,  250,    7, #   780
          188,  189,   11,  154,   20,  218,  160,  220,  151,  160, #   790
          260,  263,  166,  154,  227,   24,   24,  218,   11,  160, #   800
          188,  189,   32,   33,  216,  217,  239,  240,  241,  242, #   810
          243,  244,  245,  246,  247,  248,  249,  250,   68,  160, #   820
          215,   20,  193,  244,  245,  246,  247,  248,  249,  250, #   830
          263,  160,  254,  255,  197,  198,  199,  200,  201,  202, #   840
          203,  204,  263,   20,   22,  175,  160,  218,   13,  220, #   850
          182,  183,  182,  164,  165,   32,  227,  218,  154,   20, #   860
          259,  146,  147,   22,  160,  160,  160,  127,  239,  240, #   870
          241,  242,  243,  244,  245,  246,  247,  248,  249,  250, #   880
          241,  242,  243,  244,  245,  246,  247,  248,  249,  250, #   890
          128,   20,  263,   28,  113,  129,   24,  193,  120,    8, #   900
           56,   65,  263,   32,   20,    7,   38,   22,   22,   20, #   910
          154,   38,  151,   38,   11,   45,  160,   38,  259,   56, #   920
           28,  160,  218,   72,  220,   32,   22,   72,  134,  154, #   930
          259,  227,  136,   22,   22,  160,   22,  251,   20,  151, #   940
           24,   20,   68,  239,  240,  241,  242,  243,  244,  245, #   950
          246,  247,  248,  249,  250,   22,  251,  251,  197,  198, #   960
          199,  200,  201,  202,  203,  204,   22,  263,   22,   20, #   970
           55,  154,   22,   20,  218,  219,  220,  160,   55,   22, #   980
          151,   22,   20,  227,   28,  197,  198,  199,  200,  201, #   990
          202,  203,  204,  218,  233,  239,  240,  241,  242,  243, #  1000
          244,  245,  246,  247,  248,  249,  250,   28,    1,    1, #  1010
          193,  154,  251,    1,   22,   55,   20,  160,   13,  263, #  1020
          245,  246,  247,  248,  249,  250,  197,  198,  199,  200, #  1030
          201,  202,  203,  204,   24,  218,   20,  220,  263,   20, #  1040
           20,  122,  122,   22,  227,   20,  124,   20,   22,   11, #  1050
           22,   22,   22,   20,   18,   44,  239,  240,  241,  242, #  1060
          243,  244,  245,  246,  247,  248,  249,  250,   22,   22, #  1070
           22,  154,   22,   22,   11,  218,  151,  160,   43,   22, #  1080
          263,   28,   33,   28,  227,   17,   43,   18,    8,   11, #  1090
           13,  234,   11,   28,   30,  238,  239,  240,  241,  242, #  1100
          243,  244,  245,  246,  247,  248,  249,  250,  154,   13, #  1110
           11,   13,   17,   20,  160,  154,   46,   38,   18,   18, #  1120
          263,  160,  197,  198,  199,  200,  201,  202,  203,  204, #  1130
           55,   20,  266,  145,  145,  218,  178,  153,  191,  191, #  1140
          154,  178,   32,  207,  227,   42,  208,   76,  209,  154, #  1150
           78,  196,   35,  236,   80,  160,  239,  240,  241,  242, #  1160
          243,  244,  245,  246,  247,  248,  249,  250,  258,  160, #  1170
           94,  207,  218,  208,   32,  209,  252,  160,  160,  218, #  1180
          263,  227,  151,   55,  194,   35,  154,  194,  234,   32, #  1190
          196,  208,  160,  239,  240,  241,  242,  243,  244,  245, #  1200
          246,  247,  248,  249,  250,  244,  245,  246,  247,  248, #  1210
          249,  250,  154,  218,  217,  161,  160,  263,  160,   24, #  1220
          154,  207,  209,  222,  263,   55,  160,  223,  197,  198, #  1230
          199,  200,  201,  202,  203,  204,  196,   84,  243,  244, #  1240
          245,  246,  247,  248,  249,  250,  154,  224,   83,  189, #  1250
          218,   38,  160,   32,  172,  161,    7,  216,  263,  207, #  1260
          216,  194,  160,  154,   65,  161,  160,  208,  160,  160, #  1270
          209,   18,  160,  231,  252,  161,  218,  194,  246,  247, #  1280
          248,  249,  250,  196,  218,  227,  196,  161,  161,  145, #  1290
          154,   62,  253,   28,  221,  263,  160,  239,  240,  241, #  1300
          242,  243,  244,  245,  246,  247,  248,  249,  250,  123, #  1310
          218,   20,  220,  247,  248,  249,  250,  255,  229,  227, #  1320
           15,  263,  155,  265,  153,  162,  154,  218,   24,  263, #  1330
           32,  239,  240,  241,  242,  243,  244,  245,  246,  247, #  1340
          248,  249,  250,  154,  167,  216,  216,  167,  160,  160, #  1350
          154,  153,  162,  161,  218,  263,  247,  248,  249,  250, #  1360
          173,  154,   35,  227,  179,  252,   32,  160,  252,  161, #  1370
          173,  156,  263,   42,  154,  239,  240,  241,  242,  243, #  1380
          244,  245,  246,  247,  248,  249,  250,  156,  161,  156, #  1390
          172,  172,  154,  158,  154,   12,  154,  160,  172,  263, #  1400
          160,  160,  172,  167,  161,  161,  160,  218,  154,  153, #  1410
           18,  172,  184,   47,   20,  190,  227,  172,  186,  185, #  1420
           38,  160,  205,  161,  256,  218,  257,  161,  239,  240, #  1430
          241,  242,  243,  244,  245,  246,  247,  248,  249,  250, #  1440
          154,  190,  190,  196,  194,  182,  160,  237,  267,  256, #  1450
          161,  170,  263,  246,  247,  248,  249,  250,  218,  195, #  1460
          172,  206,  195,  195,  195,  195,  195,  174,  252,  174, #  1470
          263,  159,  182,  195,  154,  160,  252,  161,  256,  165, #  1480
          160,  269,  181,  243,  244,  245,  246,  247,  248,  249, #  1490
          250,  192,  269,  152,  211,  182,  161,  205,   32,   12, #  1500
          270,  270,  270,  263,  218,  270,  270,  270,  270,  154, #  1510
          270,  270,  270,  227,  270,  160,  270,  270,  270,  270, #  1520
          270,  270,  270,  270,  270,  239,  240,  241,  242,  243, #  1530
          244,  245,  246,  247,  248,  249,  250,  270,  218,  270, #  1540
          270,  270,  270,  270,  270,  270,  270,  227,  270,  263, #  1550
          270,  270,  270,  270,  270,  270,  270,  270,  270,  239, #  1560
          240,  241,  242,  243,  244,  245,  246,  247,  248,  249, #  1570
          250,  154,  270,  218,  270,  270,  270,  160,  270,  270, #  1580
          270,  270,  227,  263,  270,  270,  270,  270,  270,  270, #  1590
          270,  270,  270,  270,  239,  240,  241,  242,  243,  244, #  1600
          245,  246,  247,  248,  249,  250,  270,  270,  270,  270, #  1610
          270,  270,  270,  270,  270,  270,  270,  270,  263,  270, #  1620
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1630
          270,  270,  270,  270,  270,  218,  270,  270,  270,  270, #  1640
          270,  270,  270,  270,  227,  270,  270,  270,  270,  270, #  1650
          270,  270,  270,  270,  270,  270,  239,  240,  241,  242, #  1660
          243,  244,  245,  246,  247,  248,  249,  250,  154,  270, #  1670
          270,  270,  270,  270,  160,  270,  270,  270,  270,  270, #  1680
          263,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1690
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1700
          270,  270,  154,  270,  270,  270,  270,  270,  160,  270, #  1710
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1720
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1730
          270,  270,  218,  270,  270,  270,  270,  154,  270,  270, #  1740
          270,  227,  270,  160,  270,  270,  270,  270,  270,  270, #  1750
          270,  270,  270,  239,  240,  241,  242,  243,  244,  245, #  1760
          246,  247,  248,  249,  250,  270,  218,  270,  270,  270, #  1770
          270,  270,  270,  154,  270,  227,  270,  263,  270,  160, #  1780
          270,  270,  270,  270,  270,  270,  270,  239,  240,  241, #  1790
          242,  243,  244,  245,  246,  247,  248,  249,  250,  154, #  1800
          270,  218,  270,  270,  270,  160,  270,  270,  270,  270, #  1810
          227,  263,  270,  270,  270,  270,  270,  270,  270,  270, #  1820
          270,  270,  239,  240,  241,  242,  243,  244,  245,  246, #  1830
          247,  248,  249,  250,  270,  270,  270,  218,  270,  270, #  1840
          270,  270,  270,  270,  270,  270,  263,  270,  270,  270, #  1850
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1860
          270,  270,  270,  218,  245,  246,  247,  248,  249,  250, #  1870
          270,  270,  227,  270,  270,  270,  270,  270,  270,  270, #  1880
          270,  270,  263,  270,  239,  240,  241,  242,  243,  244, #  1890
          245,  246,  247,  248,  249,  250,  154,  270,  270,  270, #  1900
          270,  270,  160,  270,  270,  270,  270,  270,  263,  270, #  1910
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1920
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1930
          154,  270,  270,  270,  270,  270,  160,  270,  270,  270, #  1940
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1950
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  1960
          218,  270,  270,  270,  270,  154,  270,  270,  270,  227, #  1970
          270,  160,  270,  270,  270,  270,  270,  270,  270,  270, #  1980
          270,  239,  240,  241,  242,  243,  244,  245,  246,  247, #  1990
          248,  249,  250,  270,  218,  270,  270,  270,  270,  270, #  2000
          270,  154,  270,  227,  270,  263,  270,  160,  270,  270, #  2010
          270,  270,  270,  270,  270,  239,  240,  241,  242,  243, #  2020
          244,  245,  246,  247,  248,  249,  250,  154,  270,  218, #  2030
          270,  270,  270,  160,  270,  270,  270,  270,  227,  263, #  2040
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2050
          239,  240,  241,  242,  243,  244,  245,  246,  247,  248, #  2060
          249,  250,  270,  270,  270,  218,  270,  270,  270,  270, #  2070
          270,  270,  270,  270,  263,  270,  270,  270,  270,  270, #  2080
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2090
          270,  218,  245,  246,  247,  248,  249,  250,  270,  270, #  2100
          227,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2110
          263,  270,  239,  240,  241,  242,  243,  244,  245,  246, #  2120
          247,  248,  249,  250,  154,  270,  270,  270,  270,  270, #  2130
          160,  270,  270,  270,  270,  270,  263,  270,  270,  270, #  2140
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2150
          270,  270,  270,  270,  270,  270,  270,  270,  154,  270, #  2160
          270,  270,  270,  270,  160,  270,  270,  270,  270,  270, #  2170
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2180
          270,  270,  270,  270,  270,  270,  270,  270,  218,  270, #  2190
          270,  270,  270,  154,  270,  270,  270,  227,  270,  160, #  2200
          270,  270,  270,  270,  270,  270,  270,  270,  270,  239, #  2210
          240,  241,  242,  243,  244,  245,  246,  247,  248,  249, #  2220
          250,  270,  218,  270,  270,  270,  270,  270,  270,  154, #  2230
          270,  227,  270,  263,  270,  160,  270,  270,  270,  270, #  2240
          270,  270,  270,  239,  240,  241,  242,  243,  244,  245, #  2250
          246,  247,  248,  249,  250,  154,  270,  218,  270,  270, #  2260
          270,  160,  270,  270,  270,  270,  227,  263,  270,  270, #  2270
          270,  270,  270,  270,  270,  270,  270,  270,  239,  240, #  2280
          241,  242,  243,  244,  245,  246,  247,  248,  249,  250, #  2290
          270,  154,  270,  218,  270,  270,  270,  160,  270,  270, #  2300
          270,  270,  263,  270,  270,  270,  270,  270,  270,  270, #  2310
          270,  270,  270,  270,  270,  270,  270,  270,  270,  218, #  2320
          245,  246,  247,  248,  249,  250,  270,  270,  227,  270, #  2330
          270,  270,  270,  270,  270,  270,  270,  270,  263,  270, #  2340
          239,  240,  241,  242,  243,  244,  245,  246,  247,  248, #  2350
          249,  250,  154,  270,  270,  218,  270,  270,  160,  270, #  2360
          270,  270,  270,  270,  263,  270,  270,  270,  270,  270, #  2370
          270,  270,  270,  270,  270,  270,  270,  240,  241,  242, #  2380
          243,  244,  245,  246,  247,  248,  249,  250,  154,  270, #  2390
          270,  270,  270,  270,  160,  270,  270,  270,  154,  270, #  2400
          263,  270,  270,  270,  160,  270,  270,  270,  270,  154, #  2410
          270,  270,  270,  270,  270,  160,  218,  270,  270,  270, #  2420
          270,  154,  270,  270,  270,  270,  270,  160,  270,  270, #  2430
          270,  270,  270,  270,  270,  270,  270,  270,  270,  241, #  2440
          242,  243,  244,  245,  246,  247,  248,  249,  250,  270, #  2450
          270,  270,  218,  270,  270,  270,  270,  154,  270,  270, #  2460
          270,  263,  218,  160,  270,  270,  270,  270,  270,  270, #  2470
          270,  270,  270,  218,  270,  270,  270,  243,  244,  245, #  2480
          246,  247,  248,  249,  250,  218,  270,  243,  244,  245, #  2490
          246,  247,  248,  249,  250,  270,  270,  263,  243,  244, #  2500
          245,  246,  247,  248,  249,  250,  270,  263,  270,  270, #  2510
          243,  244,  245,  246,  247,  248,  249,  250,  263,  154, #  2520
          270,  218,  270,  270,  270,  160,  270,  270,  270,  270, #  2530
          263,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2540
          270,  270,  270,  270,  270,  270,  243,  244,  245,  246, #  2550
          247,  248,  249,  250,  270,  154,  270,  270,  270,  270, #  2560
          270,  160,  270,  270,  270,  270,  263,  270,  270,  270, #  2570
          270,  270,  270,  270,  270,  270,  154,  270,  270,  270, #  2580
          270,  270,  160,  218,  270,  270,  270,  270,  270,  270, #  2590
          270,  270,  270,  270,  270,  270,  270,  154,  270,  270, #  2600
          270,  270,  270,  160,  270,  270,  270,  270,  243,  244, #  2610
          245,  246,  247,  248,  249,  250,  270,  270,  154,  218, #  2620
          270,  270,  270,  270,  160,  270,  270,  270,  263,  270, #  2630
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2640
          218,  270,  270,  270,  243,  244,  245,  246,  247,  248, #  2650
          249,  250,  154,  270,  270,  270,  270,  270,  160,  270, #  2660
          270,  218,  270,  270,  263,  243,  244,  245,  246,  247, #  2670
          248,  249,  250,  154,  270,  270,  270,  270,  270,  160, #  2680
          270,  270,  218,  270,  270,  263,  243,  244,  245,  246, #  2690
          247,  248,  249,  250,  270,  270,  270,  270,  270,  270, #  2700
          270,  270,  270,  270,  270,  270,  263,  243,  244,  245, #  2710
          246,  247,  248,  249,  250,  270,  218,  270,  270,  270, #  2720
          270,  270,  270,  270,  270,  270,  270,  263,  270,  270, #  2730
          270,  270,  270,  270,  270,  270,  270,  218,  270,  270, #  2740
          270,  243,  244,  245,  246,  247,  248,  249,  250,  270, #  2750
          270,  270,  154,  270,  270,  270,  270,  270,  160,  270, #  2760
          270,  263,  243,  244,  245,  246,  247,  248,  249,  250, #  2770
          270,  270,  270,  154,  270,  270,  270,  270,  270,  160, #  2780
          270,  270,  263,  270,  270,  270,  270,  270,  270,  270, #  2790
          270,  270,  270,  270,  270,  154,  270,  270,  270,  270, #  2800
          270,  160,  270,  270,  270,  270,  154,  270,  270,  270, #  2810
          270,  270,  160,  270,  270,  270,  218,  270,  270,  270, #  2820
          270,  270,  270,  270,  270,  270,  270,  270,  154,  270, #  2830
          270,  270,  270,  270,  160,  270,  270,  218,  270,  270, #  2840
          270,  243,  244,  245,  246,  247,  248,  249,  250,  270, #  2850
          270,  270,  270,  270,  270,  270,  270,  270,  270,  218, #  2860
          270,  263,  243,  244,  245,  246,  247,  248,  249,  250, #  2870
          218,  154,  270,  270,  270,  270,  270,  160,  270,  270, #  2880
          270,  270,  263,  270,  243,  244,  245,  246,  247,  248, #  2890
          249,  250,  218,  270,  270,  243,  244,  245,  246,  247, #  2900
          248,  249,  250,  270,  263,  270,  270,  154,  270,  270, #  2910
          270,  270,  270,  160,  270,  263,  270,  243,  244,  245, #  2920
          246,  247,  248,  249,  250,  270,  270,  270,  154,  270, #  2930
          270,  270,  270,  270,  160,  218,  270,  263,  270,  270, #  2940
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  2950
          154,  270,  270,  270,  270,  270,  160,  270,  270,  270, #  2960
          243,  244,  245,  246,  247,  248,  249,  250,  270,  270, #  2970
          270,  218,  270,  270,  270,  270,  270,  270,  270,  270, #  2980
          263,  270,  270,  154,  270,  270,  270,  270,  270,  160, #  2990
          270,  270,  218,  270,  270,  270,  243,  244,  245,  246, #  3000
          247,  248,  249,  250,  270,  270,  270,  270,  270,  270, #  3010
          270,  270,  270,  270,  218,  270,  263,  243,  244,  245, #  3020
          246,  247,  248,  249,  250,  154,  270,  270,  270,  270, #  3030
          270,  160,  154,  270,  270,  270,  270,  263,  160,  243, #  3040
          244,  245,  246,  247,  248,  249,  250,  218,  270,  270, #  3050
          270,  270,  270,  270,  270,  270,  270,  270,  270,  263, #  3060
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  3070
          270,  270,  243,  244,  245,  246,  247,  248,  249,  250, #  3080
          270,  270,  270,  270,  270,  270,  270,  270,  270,  218, #  3090
          270,  270,  263,  270,  270,  270,  218,  270,  270,  270, #  3100
          270,  270,  270,  270,  270,  270,  270,  270,  270,  270, #  3110
          270,  270,  270,  270,  270,  244,  245,  246,  247,  248, #  3120
          249,  250,  244,  245,  246,  247,  248,  249,  250,  270, #  3130
          270,  270,  270,  270,  263,  270,  270,  270,  270,  270, #  3140
          270,  263, #  3150
        ]
    YY_SHIFT_USE_DFLT = -95
    YY_SHIFT_COUNT = 506
    YY_SHIFT_MIN = -94
    YY_SHIFT_MAX = 1497
    yy_shift_ofst = [
          -95,  150,  150,  150,  318,  204,  264,  318,  264,  264, #     0
          264,  432,  432,  264,  432,  432,  432,  432,  432,  432, #    10
          432,  432,  432,  432,  432,  432,  432,  432,  432,  432, #    20
          432,  432,  432,  432,  432,  432,  432,  432,  378,  492, #    30
          492,  492,  492,  492,  492,  492,  492,  492,  492,  492, #    40
          492,  492,  492,  492,  492,  492,  492,  492,  492,  492, #    50
          492,  492,  643,   -3,  492,  492,  492,  492,  492,  492, #    60
          492,  492,  492,  492,  282,  282,  282,  282,  282,  492, #    70
          492,  492,  492,  492,  492,  492,  492,  492,   -7,   -7, #    80
         1152, 1152, 1152, 1152,  456,  456,  406,  406,  207,  406, #    90
          881,  833, 1497, 1223, 1152, 1152, 1152, 1152,  456,  403, #   100
          406,  406,  334,  296,  296,  833,  560,  258,  258,  258, #   110
          782,  780,  781, 1223, 1223, 1497, 1308, 1152, 1393, 1152, #   120
         1152, 1152, 1152, 1163, 1223, 1476, 1163, 1152, 1163, 1163, #   130
          -95,  449,  511,  397,  292,  194,  235,  -59,  149,  533, #   140
          503,  403,  391,  155,  244,  347,  347,  430,  210,  253, #   150
          580,  296,  690,  673,  673,  555,  660,  441,  473,  580, #   160
          580,  523,  580,  296,  580,  679,   91,  580,  671,   91, #   170
          595,  580,  667,  563, 1127, 1167, 1160, 1152, 1392, 1392, #   180
         1392, 1404, 1376, 1402, 1231, 1231, 1113, 1120, 1231, 1231, #   190
         1152, 1308, 1167, 1167, 1152, 1152, 1120, 1393, 1120, 1231, #   200
         1231, 1341, 1167, 1341, 1120, 1341, 1337, 1167, 1344, 1337, #   210
         1167, 1113, 1314, 1120, 1152, 1308, 1308, 1314, 1120, 1113, #   220
         1315, 1259, 1259, 1086, 1301, 1086, 1196, 1275, 1239, 1167, #   230
         1263, 1167, 1127, 1167, 1086, 1152, 1152, 1160, 1209, 1152, #   240
         1084, 1082, 1081, 1127, 1167, 1259, 1160, 1152, 1259, 1167, #   250
         1231, 1223, 1175, 1163, 1180, 1127, 1205, 1152, 1084, 1082, #   260
         1081, 1127, 1167, 1160, 1160, 1138, 1152, 1152, 1152, 1086, #   270
         1084, 1082, 1081, 1127, 1084, 1082, 1081, 1120, 1113,  -95, #   280
          -95,  -95,  -95,  -95,  -95,  -95,  498,  181,  -53,  200, #   290
          668,  663,   78,  -21,  590,  259,  152,   73,  -56,  -94, #   300
          -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94, #   310
          -94,  -94,   31,   31,   31,   31,  -94,   31,  -94,  312, #   320
            4,  163,  117,  510,  491,  -23,  -23,  482,  -23,  389, #   330
          662,  617,  605,  493,  421,  586,  440,  274,  180,  591, #   340
          530,  463,  233,  319,  377,  303,  336,  316,  170,  225, #   350
           50,  319,  319,   -5,  319,  -85,  203,  319,   -6,   51, #   360
         1121, 1085,  913, 1080, 1111, 1089, 1110, 1105, 1103, 1108, #   370
         1109, 1074, 1075, 1106, 1091, 1087, 1088,  913, 1090, 1053, #   380
         1079, 1078, 1065, 1073, 1067, 1059, 1073, 1063, 1046, 1045, #   390
         1021, 1060, 1048, 1061, 1058, 1057, 1056, 1040, 1043, 1039, #   400
         1038, 1037, 1036, 1035, 1031, 1030,  930, 1029, 1026,  932, #   410
         1020,  929, 1015, 1006,  970, 1002, 1022, 1018, 1017,  989, #   420
          966,  969,  972,  967,  963,  933,  960,  959,  925,  956, #   430
          954,  943,  931,  926,  884,  928,  924,  922,  921,  806, #   440
          804,  865,  903,  914,  861,  902,  873,  889,  880,  913, #   450
          797,  885,  899,  883,  878,  896,  895,  908,  894,  846, #   460
          854,  901,  776,  788,  882,  791,  875,  772,  750,  851, #   470
          849,  845,  832,   29,  811,   29,  760,  797,  774,  652, #   480
          644,  572,  104,   29,   24,  570,  459,  371,  363,  232, #   490
          104,   29,   24,   40,   70,   28,   15, #   500
        ]
    YY_REDUCE_USE_DFLT = -152
    YY_REDUCE_COUNT = 295
    YY_REDUCE_MIN = -151
    YY_REDUCE_MAX = 2888
    yy_reduce_ofst = [
          725,  -97, -151,  -43,  422,  867,  827,  766,  714,  639, #     0
          577,  538,  478, 1102, 1068,  964,  927, 2111, 2049, 2014, #    10
         1980, 1883, 1821, 1786, 1752, 1655, 1593, 1558, 1524, 1427, #    20
         1365, 1330, 1296, 1199, 1146, 2147, 2208,  649, 2839, 2806, #    30
         2784, 2763, 2727, 2684, 2662, 2651, 2629, 2608, 2529, 2508, #    40
         2474, 2453, 2432, 2411, 2375, 2313, 2277, 2265, 2254, 2244, #    50
         1250, 1005, -129,  771, 2888, 2881,  971,  589, 2085, 1857, #    60
         1629,  785, 1217, 1042, 1041,  935,  839,  798,  647, 1119, #    70
         1076,  497,  -38,  490,  311,  151,    9, -136,  309,  172, #    80
          179,  153,  146,  127,  415,  332,  423,  368,  394,  249, #    90
          455,  382,  302,  273,  354,  280,  -40,  161,  460,  699, #   100
          716,  715,  696,  678,  680,  395,  588,  681,  669,  611, #   110
          598,  615,  537,  622,  602,  581,  606,  636,  578,  380, #   120
          246,  540,  447,  532,  544,  466,  528,  -98,  506,  276, #   130
          457, 1323, 1311, 1311, 1311, 1345, 1293, 1302, 1351, 1309, #   140
         1309, 1324, 1311, 1326, 1112, 1233, 1222, 1232, 1234, 1325, #   150
         1288, 1300, 1322, 1305, 1303, 1298, 1291, 1299, 1226, 1281, #   160
         1280, 1191, 1279, 1273, 1278, 1276, 1203, 1277, 1179, 1178, #   170
         1220, 1274, 1265, 1227, 1257, 1272, 1260, 1271, 1262, 1261, #   180
         1235, 1242, 1244, 1238, 1255, 1249, 1266, 1264, 1240, 1236, #   190
         1256, 1246, 1254, 1253, 1251, 1247, 1252, 1245, 1248, 1229, #   200
         1228, 1243, 1237, 1241, 1230, 1225, 1207, 1218, 1195, 1197, #   210
         1202, 1208, 1200, 1206, 1198, 1190, 1187, 1173, 1182, 1181, #   220
         1177, 1140, 1139, 1126, 1099, 1123, 1072, 1049, 1154, 1137, #   230
         1052, 1136, 1100, 1124, 1032, 1122, 1118, 1093, 1083, 1116, #   240
         1071, 1069, 1062, 1097, 1114, 1054, 1077, 1112, 1051, 1104, #   250
         1092, 1070, 1033, 1014, 1011, 1050, 1007, 1066, 1023,  993, #   260
         1024, 1004, 1064, 1003, 1000,  920, 1028, 1027, 1019,  934, #   270
          976,  975,  974,  965,  949,  948,  946,  996,  994,  958, #   280
          957,  973,  968,  999,  998,  876, #   290
        ]
    yy_default = [
          732,  926,  926, 1073, 1073,  926, 1073, 1073, 1073, 1073, #     0
         1073,  926, 1073, 1073, 1055, 1073, 1073, 1073, 1073, 1073, #    10
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    20
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    30
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    40
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    50
         1073, 1073,  734, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    60
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    70
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #    80
          867,  867,  867,  867,  766,  766, 1073, 1073, 1073, 1073, #    90
         1073, 1073,  794,  811, 1073, 1073, 1073, 1073,  766, 1073, #   100
         1073, 1073, 1073,  807,  809, 1073, 1073, 1073, 1073, 1073, #   110
          881, 1073,  851, 1073, 1073,  794,  771, 1073, 1073, 1073, #   120
         1073, 1073, 1073,  921, 1073, 1073,  921, 1073,  921,  921, #   130
          794, 1073, 1073, 1073, 1073, 1073, 1073,  874,  801, 1073, #   140
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1032, 1073, 1073, #   150
          889, 1073,  749,  790,  790, 1073,  778, 1073, 1073,  889, #   160
          889, 1059,  889, 1073,  889, 1073, 1032,  889, 1014, 1032, #   170
          916,  889,  883,  874,  891, 1073, 1035, 1073, 1073, 1073, #   180
         1073,  824,  819, 1073, 1073, 1073,  805, 1073, 1073, 1073, #   190
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #   200
         1073,  803, 1073,  803, 1073,  803,  788, 1073, 1073,  788, #   210
         1073,  805,  756, 1073, 1073, 1073, 1073,  756, 1073,  805, #   220
         1073,  881,  881, 1073, 1073, 1073, 1073, 1010, 1073, 1073, #   230
          897, 1073,  891, 1073, 1073, 1073, 1073, 1035,  858, 1073, #   240
          911,  908,  899,  891, 1073,  881, 1035, 1073,  881, 1073, #   250
         1073, 1073,  919,  861,  862,  891, 1073, 1073,  911,  908, #   260
          899,  891, 1073, 1035, 1035, 1021, 1073, 1073, 1073, 1073, #   270
          911,  908,  899,  891,  911,  908,  899, 1073,  805,  826, #   280
          826,  794,  794, 1073, 1073, 1057,  936, 1073, 1073, 1073, #   290
          951,  947,  943, 1073,  952,  948,  944,  940,  939,  964, #   300
          963,  955,  953,  949,  945,  956,  954,  950,  946,  942, #   310
          941,  938,  969,  968,  970,  967,  965,  966,  937, 1073, #   320
         1073, 1073, 1073, 1073, 1073,  978,  977, 1073,  976, 1073, #   330
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,  923, 1073, #   340
         1073, 1073,  898,  974, 1073, 1073, 1073, 1073, 1073, 1065, #   350
          909,  975,  973, 1073,  972, 1073, 1073,  971,  901, 1073, #   360
         1073, 1073,  808,  817, 1073, 1073, 1073, 1073, 1073, 1073, #   370
          783, 1073, 1073, 1073,  758, 1073,  744,  812, 1073, 1073, #   380
         1073, 1073, 1073,  775, 1073, 1073,  769, 1073, 1073, 1073, #   390
         1073, 1073,  884, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #   400
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #   410
         1073, 1073, 1073, 1073,  992, 1073, 1073, 1073, 1073, 1073, #   420
         1073, 1073, 1073, 1073, 1073, 1030, 1073, 1073,  996, 1073, #   430
         1073, 1073, 1073, 1073, 1026, 1073, 1073, 1073, 1073, 1073, #   440
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,  815,  892, #   450
          863, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #   460
         1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, #   470
         1073, 1073, 1073,  982, 1073,  981, 1073,  868, 1073, 1030, #   480
         1073, 1073,  984,  980,  932,  912, 1073, 1073,  991, 1073, #   490
          983,  979,  931,  930,  927, 1073, 1073,  830,  818,  823, #   500
          822,  821,  820,  829,  828,  827,  825,  799,  798,  752, #   510
          810,  784,  786,  785,  759,  772,  763,  762,  761,  760, #   520
          745,  750,  748,  747,  746,  800,  782,  755,  804,  743, #   530
          802,  781,  903,  789,  797,  796,  795,  791,  780,  754, #   540
          757,  764,  779,  774,  770,  776,  777,  768,  773,  767, #   550
          765,  753,  806,  751,  742,  893,  905,  896,  895,  894, #   560
          925,  924, 1047, 1046, 1045,  962,  961,  959,  957,  960, #   570
          958, 1011, 1012, 1005, 1013,  870,  869, 1006, 1004,  994, #   580
         1041,  873,  872,  843,  842,  841,  887, 1037,  888,  886, #   590
          885,  844,  913, 1009, 1000,  999,  998,  997, 1003, 1002, #   600
         1016, 1019, 1020, 1018, 1017, 1015, 1023, 1025, 1024, 1022, #   610
         1049, 1048,  847,  854,  859,  857,  856,  855,  846,  852, #   620
          850,  849,  848,  900,  928, 1029, 1051,  875, 1056, 1060, #   630
         1064, 1063, 1062, 1061, 1058, 1054, 1052,  882,  880, 1053, #   640
          879,  878,  877,  876,  904,  871,  902,  890,  907,  906, #   650
          816,  814,  813,  920,  860, 1068, 1069, 1072, 1071, 1070, #   660
         1067, 1066, 1050, 1030,  853, 1028, 1027,  910,  845, 1044, #   670
         1043, 1042, 1036, 1008, 1034, 1033, 1007, 1031, 1001,  866, #   680
          865,  864,  995,  934,  918,  917,  915,  914,  840, 1040, #   690
         1039, 1038,  993,  901,  990,  989,  988,  987,  986,  985, #   700
          935,  933,  929,  922,  839,  838,  837,  836,  835,  834, #   710
          833,  832,  831,  741,  740,  739,  738,  737,  736,  735, #   720
          733, #   730
        ]


    # The next table maps tokens into fallback tokens.  If a construct
    # like the following:
    #
    #      %fallback ID X Y Z.
    #
    # appears in the grammer, then ID becomes a fallback token for X, Y,
    # and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
    # but it does not parse, the type of the token is changed to ID and
    # the parse is retried before an error is thrown.

    yyFallback = [
          0,  #          $ => nothing
          0,  #     T_SEMI => nothing
         32,  #    K_BEGIN => L_NAME
         32,  # K_ROLLBACK => L_NAME
         32,  #   K_COMMIT => L_NAME
         32,  #   K_CREATE => L_NAME
         32,  #    K_TABLE => L_NAME
         32,  #       K_AS => L_NAME
         32,  #     K_FROM => L_NAME
         32,  #     K_DROP => L_NAME
         32,  #    K_ALTER => L_NAME
          0,  #    T_COMMA => nothing
         32,  #   K_RENAME => L_NAME
         32,  #       K_TO => L_NAME
         32,  #   K_COLUMN => L_NAME
          0,  #   L_STRING => nothing
         32,  #    K_GUESS => L_NAME
         32,  #   K_SCHEMA => L_NAME
         32,  #      K_FOR => L_NAME
         32,  # K_POPULATION => L_NAME
          0,  #   T_LROUND => nothing
          0,  #   T_LCURLY => nothing
          0,  #   T_RROUND => nothing
          0,  #   T_RCURLY => nothing
         32,  #     K_WITH => L_NAME
         32,  #      K_SET => L_NAME
         32,  # K_STATTYPES => L_NAME
         32,  # K_STATTYPE => L_NAME
         32,  #       K_OF => L_NAME
         32,  #      K_ADD => L_NAME
         32,  # K_VARIABLE => L_NAME
         32,  #   K_IGNORE => L_NAME
          0,  #     L_NAME => nothing
          0,  #     T_STAR => nothing
         32,  # K_GENERATOR => L_NAME
         32,  #    K_USING => L_NAME
          0,  #        ANY => nothing
         32,  # K_INITIALIZE => L_NAME
          0,  #  L_INTEGER => nothing
         32,  #  K_ANALYZE => L_NAME
         32,  #     K_TEMP => L_NAME
         32,  # K_TEMPORARY => L_NAME
         32,  #       K_IF => L_NAME
         32,  #   K_EXISTS => L_NAME
         32,  #      K_NOT => L_NAME
          0,  #    T_MINUS => nothing
         32,  #       K_OR => L_NAME
         32,  # K_CHECKPOINT => L_NAME
         32,  # K_ITERATION => L_NAME
         32,  # K_ITERATIONS => L_NAME
         32,  #   K_MINUTE => L_NAME
         32,  #  K_MINUTES => L_NAME
         32,  #   K_SECOND => L_NAME
         32,  #  K_SECONDS => L_NAME
         32,  #  K_REGRESS => L_NAME
         32,  #    K_GIVEN => L_NAME
         32,  #       K_BY => L_NAME
         32,  #   K_WITHIN => L_NAME
         32,  #   K_SELECT => L_NAME
         32,  # K_ESTIMATE => L_NAME
         32,  #  K_COLUMNS => L_NAME
         32,  # K_PAIRWISE => L_NAME
         32,  #      K_ROW => L_NAME
         32,  #    K_INFER => L_NAME
         32,  # K_EXPLICIT => L_NAME
         32,  # K_CONFIDENCE => L_NAME
         32,  #  K_PREDICT => L_NAME
         32,  # K_SIMULATE => L_NAME
          0,  #       T_EQ => nothing
         32,  #   K_MODELS => L_NAME
         32,  # K_DISTINCT => L_NAME
         32,  #      K_ALL => L_NAME
          0,  #      T_DOT => nothing
         32,  # K_VARIABLES => L_NAME
         32,  #  K_MODELED => L_NAME
         32,  # K_MODELLED => L_NAME
         32,  #    K_WHERE => L_NAME
         32,  #    K_MODEL => L_NAME
         32,  #    K_GROUP => L_NAME
         32,  #   K_HAVING => L_NAME
         32,  #    K_ORDER => L_NAME
         32,  #      K_ASC => L_NAME
         32,  #     K_DESC => L_NAME
         32,  # K_ACCURACY => L_NAME
         32,  #    K_LIMIT => L_NAME
         32,  #   K_OFFSET => L_NAME
         32,  #      K_AND => L_NAME
         32,  #       K_IS => L_NAME
         32,  #     K_LIKE => L_NAME
         32,  #   K_ESCAPE => L_NAME
         32,  #     K_GLOB => L_NAME
         32,  #   K_REGEXP => L_NAME
         32,  #    K_MATCH => L_NAME
         32,  #  K_BETWEEN => L_NAME
         32,  #       K_IN => L_NAME
         32,  #   K_ISNULL => L_NAME
         32,  #  K_NOTNULL => L_NAME
          0,  #      T_NEQ => nothing
          0,  #       T_LT => nothing
          0,  #      T_LEQ => nothing
          0,  #      T_GEQ => nothing
          0,  #       T_GT => nothing
          0,  #   T_BITAND => nothing
          0,  #   T_BITIOR => nothing
          0,  #   T_LSHIFT => nothing
          0,  #   T_RSHIFT => nothing
          0,  #     T_PLUS => nothing
          0,  #    T_SLASH => nothing
          0,  #  T_PERCENT => nothing
          0,  #   T_CONCAT => nothing
         32,  #  K_COLLATE => L_NAME
          0,  #   T_BITNOT => nothing
         32,  # K_PREDICTIVE => L_NAME
         32,  # K_PROBABILITY => L_NAME
         32,  #  K_DENSITY => L_NAME
         32,  #    K_VALUE => L_NAME
         32,  # K_SIMILARITY => L_NAME
         32,  # K_RELEVANCE => L_NAME
         32,  # K_DEPENDENCE => L_NAME
         32,  #   K_MUTUAL => L_NAME
         32,  # K_INFORMATION => L_NAME
         32,  # K_EXISTING => L_NAME
         32,  #     K_ROWS => L_NAME
         32,  # K_HYPOTHETICAL => L_NAME
         32,  #   K_VALUES => L_NAME
         32,  # K_CORRELATION => L_NAME
         32,  #   K_PVALUE => L_NAME
         32,  #      K_THE => L_NAME
         32,  #  K_CONTEXT => L_NAME
         32,  #  K_SAMPLES => L_NAME
          0,  #   L_NUMPAR => nothing
          0,  #   L_NAMPAR => nothing
         32,  #     K_CAST => L_NAME
          0,  #     K_CASE => nothing
         32,  #      K_END => L_NAME
          0,  #     K_WHEN => nothing
         32,  #     K_THEN => L_NAME
         32,  #     K_ELSE => L_NAME
         32,  #     K_NULL => L_NAME
          0,  #    L_FLOAT => nothing
         32,  #   K_BTABLE => L_NAME
         32,  #     K_CONF => L_NAME
         32,  #  K_DEFAULT => L_NAME
         32,  #   K_LATENT => L_NAME
         32,  #    K_UNSET => L_NAME
        ]


    # The following structure represents a single element of the
    # parser's stack.  Information stored includes:
    #
    #   +  The state number for the parser at this level of the stack.
    #
    #   +  The value of the token stored at this level of the stack.
    #      (In other words, the "major" token.)
    #
    #   +  The semantic value stored at this level of the stack.  This is
    #      the information used by the action routines in the grammar.
    #      It is sometimes called the "minor" token.
    #
    class yyStackEntry(object):
        def __init__(
            self,
            stateno, # The state-number
            major,   # The major token value.  This is the code
                     # number for the token at this stack level
            minor,   # The user-supplied minor token value.  This
                     # is the value of the token
            ):
            self.stateno = stateno
            self.major = major
            self.minor = minor
            return


    yyTraceFILE = None
    yyTracePrompt = None

    def trace(self, TraceFILE, zTracePrompt):
        '''Turn parser tracing on by giving a stream to which to write
        the trace and a prompt to preface each trace message.  Tracing
        is turned off by making either argument None.
        '''
        self.yyTraceFILE = TraceFILE
        self.yyTracePrompt = zTracePrompt
        if self.yyTraceFILE is None:
            self.yyTracePrompt = None
        elif self.yyTracePrompt is None:
            self.yyTraceFILE = None
        return


    # For tracing shifts, the names of all terminals and nonterminals
    # are required.  The following table supplies these names
    yyTokenName = [
        "$",                   "T_SEMI",              "K_BEGIN",             "K_ROLLBACK",  
        "K_COMMIT",            "K_CREATE",            "K_TABLE",             "K_AS",        
        "K_FROM",              "K_DROP",              "K_ALTER",             "T_COMMA",     
        "K_RENAME",            "K_TO",                "K_COLUMN",            "L_STRING",    
        "K_GUESS",             "K_SCHEMA",            "K_FOR",               "K_POPULATION",
        "T_LROUND",            "T_LCURLY",            "T_RROUND",            "T_RCURLY",    
        "K_WITH",              "K_SET",               "K_STATTYPES",         "K_STATTYPE",  
        "K_OF",                "K_ADD",               "K_VARIABLE",          "K_IGNORE",    
        "L_NAME",              "T_STAR",              "K_GENERATOR",         "K_USING",     
        "ANY",                 "K_INITIALIZE",        "L_INTEGER",           "K_ANALYZE",   
        "K_TEMP",              "K_TEMPORARY",         "K_IF",                "K_EXISTS",    
        "K_NOT",               "T_MINUS",             "K_OR",                "K_CHECKPOINT",
        "K_ITERATION",         "K_ITERATIONS",        "K_MINUTE",            "K_MINUTES",   
        "K_SECOND",            "K_SECONDS",           "K_REGRESS",           "K_GIVEN",     
        "K_BY",                "K_WITHIN",            "K_SELECT",            "K_ESTIMATE",  
        "K_COLUMNS",           "K_PAIRWISE",          "K_ROW",               "K_INFER",     
        "K_EXPLICIT",          "K_CONFIDENCE",        "K_PREDICT",           "K_SIMULATE",  
        "T_EQ",                "K_MODELS",            "K_DISTINCT",          "K_ALL",       
        "T_DOT",               "K_VARIABLES",         "K_MODELED",           "K_MODELLED",  
        "K_WHERE",             "K_MODEL",             "K_GROUP",             "K_HAVING",    
        "K_ORDER",             "K_ASC",               "K_DESC",              "K_ACCURACY",  
        "K_LIMIT",             "K_OFFSET",            "K_AND",               "K_IS",        
        "K_LIKE",              "K_ESCAPE",            "K_GLOB",              "K_REGEXP",    
        "K_MATCH",             "K_BETWEEN",           "K_IN",                "K_ISNULL",    
        "K_NOTNULL",           "T_NEQ",               "T_LT",                "T_LEQ",       
        "T_GEQ",               "T_GT",                "T_BITAND",            "T_BITIOR",    
        "T_LSHIFT",            "T_RSHIFT",            "T_PLUS",              "T_SLASH",     
        "T_PERCENT",           "T_CONCAT",            "K_COLLATE",           "T_BITNOT",    
        "K_PREDICTIVE",        "K_PROBABILITY",        "K_DENSITY",           "K_VALUE",     
        "K_SIMILARITY",        "K_RELEVANCE",         "K_DEPENDENCE",        "K_MUTUAL",    
        "K_INFORMATION",        "K_EXISTING",          "K_ROWS",              "K_HYPOTHETICAL",
        "K_VALUES",            "K_CORRELATION",        "K_PVALUE",            "K_THE",       
        "K_CONTEXT",           "K_SAMPLES",           "L_NUMPAR",            "L_NAMPAR",    
        "K_CAST",              "K_CASE",              "K_END",               "K_WHEN",      
        "K_THEN",              "K_ELSE",              "K_NULL",              "L_FLOAT",     
        "K_BTABLE",            "K_CONF",              "K_DEFAULT",           "K_LATENT",    
        "K_UNSET",             "error",               "bql",                 "phrases",     
        "phrase_opt",          "phrase",              "command",             "query",       
        "temp_opt",            "ifnotexists",         "table_name",          "pathname",    
        "ifexists",            "altertab_cmds",        "altertab_cmd",        "k_column_opt",
        "column_name",         "population_name",        "with_schema_opt",        "pop_schema",  
        "alterpop_cmds",        "alterpop_cmd",        "pop_columns",         "stattype",    
        "stattype_opt",        "pop_clause",          "stattypes_of_opt",        "pop_columns_guess",
        "generator_name",        "backend_name_opt",        "generator_schema_opt",        "anmodelset_matched_opt",
        "altergen_cmds",        "altergen_cmd",        "generator_schemum",        "backend_name",
        "generator_schema",        "gs_token",            "model_token",         "anmodelset_opt",
        "anlimit",             "anckpt_opt",          "analysis_program_opt",        "modelset_opt",
        "modelset",            "modelrange",          "anduration",          "analysis_program",
        "analysis_token",        "select_columns",        "nsamples_opt",        "modeledby_opt",
        "usingmodel_opt",        "select",              "estimate",            "estby",       
        "estcol",              "estpairrow",          "estpaircol",          "infer",       
        "simulate",            "select_quant",        "from_sel_opt",        "where",       
        "group_by",            "order_by",            "limit_opt",           "from_est",    
        "infer_auto_columns",        "withconf_opt",        "infer_exp_columns",        "infer_auto_column",
        "as",                  "withconf",            "primary",             "infer_exp_column",
        "select_column",        "conf_opt",            "given_opt",           "limit",       
        "accuracy_opt",        "constraints",         "constraint",          "expression",  
        "constraints_opt",        "constraints_list",        "select_tables",        "for",         
        "select_table",        "column_lists",        "expressions",         "order_keys",  
        "order_key",           "order_sense",         "expressions_opt",        "boolean_or",  
        "boolean_and",         "boolean_not",         "equality",            "ordering",    
        "bitwise",             "additive",            "multiplicative",        "concatenative",
        "collating",           "unary",               "bqlfn",               "column_list", 
        "wrt",                 "predrel_of_opt",        "existing_rows",        "hypothetical_rows",
        "ofwith",              "ofwithmulti",         "mi_given_opt",        "mi_columns",  
        "mi_column_list",        "mi_constraints",        "mi_constraint",        "literal",     
        "type",                "case_key_opt",        "case_whens_opt",        "case_else_opt",
        "typename",            "typearg",     
        ]

    # For tracing reduce actions, the names of all rules are required.
    yyRuleName = [
        "bql ::= phrases", #   0
        "phrases ::=", #   1
        "phrases ::= phrases phrase_opt T_SEMI", #   2
        "phrase_opt ::=", #   3
        "phrase_opt ::= phrase", #   4
        "phrase ::= command", #   5
        "phrase ::= query", #   6
        "command ::= K_BEGIN", #   7
        "command ::= K_ROLLBACK", #   8
        "command ::= K_COMMIT", #   9
        "command ::= K_CREATE temp_opt K_TABLE ifnotexists table_name K_AS query", #  10
        "command ::= K_CREATE temp_opt K_TABLE ifnotexists table_name K_FROM pathname", #  11
        "command ::= K_DROP K_TABLE ifexists table_name", #  12
        "command ::= K_ALTER K_TABLE table_name altertab_cmds", #  13
        "altertab_cmds ::= altertab_cmd", #  14
        "altertab_cmds ::= altertab_cmds T_COMMA altertab_cmd", #  15
        "altertab_cmd ::= K_RENAME K_TO table_name", #  16
        "altertab_cmd ::= K_RENAME k_column_opt column_name K_TO column_name", #  17
        "k_column_opt ::=", #  18
        "k_column_opt ::= K_COLUMN", #  19
        "pathname ::= L_STRING", #  20
        "command ::= K_GUESS K_SCHEMA K_FOR table_name", #  21
        "command ::= K_CREATE K_POPULATION ifnotexists population_name K_FOR table_name with_schema_opt T_LROUND|T_LCURLY pop_schema T_RROUND|T_RCURLY", #  22
        "command ::= K_CREATE K_POPULATION ifnotexists K_FOR table_name with_schema_opt T_LROUND|T_LCURLY pop_schema T_RROUND|T_RCURLY", #  23
        "command ::= K_DROP K_POPULATION ifexists population_name", #  24
        "with_schema_opt ::=", #  25
        "with_schema_opt ::= K_WITH K_SCHEMA", #  26
        "command ::= K_ALTER K_POPULATION population_name alterpop_cmds", #  27
        "alterpop_cmds ::= alterpop_cmd", #  28
        "alterpop_cmds ::= alterpop_cmds T_COMMA alterpop_cmd", #  29
        "alterpop_cmd ::= K_RENAME K_TO population_name", #  30
        "alterpop_cmd ::= K_SET K_STATTYPES|K_STATTYPE K_OF pop_columns K_TO stattype", #  31
        "alterpop_cmd ::= K_ADD K_VARIABLE column_name stattype_opt", #  32
        "pop_schema ::= pop_clause", #  33
        "pop_schema ::= pop_schema T_SEMI pop_clause", #  34
        "pop_clause ::=", #  35
        "pop_clause ::= column_name stattype", #  36
        "pop_clause ::= K_SET K_STATTYPES|K_STATTYPE K_OF pop_columns K_TO stattype", #  37
        "pop_clause ::= K_IGNORE pop_columns", #  38
        "pop_clause ::= K_GUESS stattypes_of_opt pop_columns_guess", #  39
        "stattype_opt ::=", #  40
        "stattype_opt ::= stattype", #  41
        "stattype ::= L_NAME", #  42
        "pop_columns_guess ::= T_LROUND T_STAR T_RROUND", #  43
        "pop_columns_guess ::= pop_columns", #  44
        "pop_columns ::= column_name", #  45
        "pop_columns ::= pop_columns T_COMMA column_name", #  46
        "stattypes_of_opt ::=", #  47
        "stattypes_of_opt ::= K_STATTYPE|K_STATTYPES K_OF", #  48
        "command ::= K_CREATE K_GENERATOR ifnotexists generator_name K_FOR population_name backend_name_opt generator_schema_opt", #  49
        "command ::= K_CREATE K_GENERATOR ifnotexists K_FOR population_name backend_name_opt generator_schema_opt", #  50
        "command ::= K_DROP K_GENERATOR ifexists generator_name", #  51
        "command ::= K_ALTER K_GENERATOR generator_name anmodelset_matched_opt altergen_cmds", #  52
        "altergen_cmds ::= altergen_cmd", #  53
        "altergen_cmds ::= altergen_cmds T_COMMA altergen_cmd", #  54
        "altergen_cmd ::= K_RENAME K_TO generator_name", #  55
        "altergen_cmd ::= generator_schemum", #  56
        "backend_name_opt ::=", #  57
        "backend_name_opt ::= K_USING backend_name", #  58
        "generator_schema_opt ::=", #  59
        "generator_schema_opt ::= T_LROUND|T_LCURLY generator_schema T_RROUND|T_RCURLY", #  60
        "generator_schema ::= generator_schemum", #  61
        "generator_schema ::= generator_schema T_COMMA generator_schemum", #  62
        "generator_schemum ::=", #  63
        "generator_schemum ::= generator_schemum gs_token", #  64
        "gs_token ::= T_LROUND generator_schemum T_RROUND", #  65
        "gs_token ::= ANY", #  66
        "command ::= K_INITIALIZE L_INTEGER model_token ifnotexists K_FOR generator_name", #  67
        "command ::= K_ANALYZE generator_name anmodelset_opt anlimit anckpt_opt analysis_program_opt", #  68
        "command ::= K_DROP model_token modelset_opt K_FROM generator_name", #  69
        "temp_opt ::=", #  70
        "temp_opt ::= K_TEMP|K_TEMPORARY", #  71
        "ifexists ::=", #  72
        "ifexists ::= K_IF K_EXISTS", #  73
        "ifnotexists ::=", #  74
        "ifnotexists ::= K_IF K_NOT K_EXISTS", #  75
        "anmodelset_opt ::=", #  76
        "anmodelset_opt ::= model_token modelset", #  77
        "anmodelset_matched_opt ::=", #  78
        "anmodelset_matched_opt ::= model_token T_LROUND modelset T_RROUND", #  79
        "modelset_opt ::=", #  80
        "modelset_opt ::= modelset", #  81
        "modelset ::= modelrange", #  82
        "modelset ::= modelset T_COMMA modelrange", #  83
        "modelrange ::= L_INTEGER", #  84
        "modelrange ::= L_INTEGER T_MINUS L_INTEGER", #  85
        "anlimit ::= K_FOR anduration", #  86
        "anlimit ::= K_FOR anduration K_OR anduration", #  87
        "anckpt_opt ::=", #  88
        "anckpt_opt ::= K_CHECKPOINT anduration", #  89
        "anduration ::= L_INTEGER K_ITERATION|K_ITERATIONS", #  90
        "anduration ::= L_INTEGER K_MINUTE|K_MINUTES", #  91
        "anduration ::= L_INTEGER K_SECOND|K_SECONDS", #  92
        "analysis_program_opt ::=", #  93
        "analysis_program_opt ::= T_LROUND analysis_program T_RROUND", #  94
        "analysis_program ::=", #  95
        "analysis_program ::= analysis_program analysis_token", #  96
        "analysis_token ::= T_LROUND analysis_program T_RROUND", #  97
        "analysis_token ::= ANY", #  98
        "command ::= K_REGRESS column_name K_GIVEN T_LROUND select_columns T_RROUND nsamples_opt K_BY|K_WITHIN population_name modeledby_opt usingmodel_opt", #  99
        "query ::= select", # 100
        "query ::= estimate", # 101
        "query ::= estby", # 102
        "query ::= estcol", # 103
        "query ::= estpairrow", # 104
        "query ::= estpaircol", # 105
        "query ::= infer", # 106
        "query ::= simulate", # 107
        "select ::= K_SELECT select_quant select_columns from_sel_opt where group_by order_by limit_opt", # 108
        "estimate ::= K_ESTIMATE select_quant select_columns from_est modeledby_opt usingmodel_opt where group_by order_by limit_opt", # 109
        "estcol ::= K_ESTIMATE K_COLUMNS error T_SEMI", # 110
        "estpairrow ::= K_ESTIMATE K_PAIRWISE K_ROW error T_SEMI", # 111
        "estpaircol ::= K_ESTIMATE K_PAIRWISE error T_SEMI", # 112
        "estby ::= K_ESTIMATE select_quant select_columns K_BY|K_WITHIN population_name modeledby_opt usingmodel_opt", # 113
        "infer ::= K_INFER infer_auto_columns withconf_opt nsamples_opt K_FROM population_name modeledby_opt usingmodel_opt where group_by order_by limit_opt", # 114
        "infer ::= K_INFER K_EXPLICIT infer_exp_columns K_FROM population_name modeledby_opt usingmodel_opt where group_by order_by limit_opt", # 115
        "infer_auto_columns ::= infer_auto_column", # 116
        "infer_auto_columns ::= infer_auto_columns T_COMMA infer_auto_column", # 117
        "infer_auto_column ::= T_STAR", # 118
        "infer_auto_column ::= column_name as", # 119
        "withconf_opt ::=", # 120
        "withconf_opt ::= withconf", # 121
        "withconf ::= K_WITH K_CONFIDENCE primary", # 122
        "infer_exp_columns ::= infer_exp_column", # 123
        "infer_exp_columns ::= infer_exp_columns T_COMMA infer_exp_column", # 124
        "infer_exp_column ::= select_column", # 125
        "infer_exp_column ::= K_PREDICT column_name as conf_opt nsamples_opt", # 126
        "conf_opt ::=", # 127
        "conf_opt ::= K_CONFIDENCE column_name", # 128
        "simulate ::= K_SIMULATE select_columns K_FROM population_name modeledby_opt usingmodel_opt given_opt limit accuracy_opt", # 129
        "simulate ::= K_SIMULATE select_columns K_FROM population_name modeledby_opt usingmodel_opt given_opt", # 130
        "given_opt ::=", # 131
        "given_opt ::= K_GIVEN constraints", # 132
        "constraints ::= constraint", # 133
        "constraints ::= constraints T_COMMA constraint", # 134
        "constraint ::= column_name T_EQ expression", # 135
        "constraints_opt ::=", # 136
        "constraints_opt ::= constraints", # 137
        "constraints_list ::= T_LROUND constraints T_RROUND", # 138
        "constraints_list ::= constraints_list T_COMMA T_LROUND constraints T_RROUND", # 139
        "simulate ::= K_SIMULATE select_columns K_FROM K_MODELS K_OF population_name modeledby_opt", # 140
        "select_quant ::= K_DISTINCT", # 141
        "select_quant ::= K_ALL", # 142
        "select_quant ::=", # 143
        "select_columns ::= select_column", # 144
        "select_columns ::= select_columns T_COMMA select_column", # 145
        "select_column ::= T_STAR", # 146
        "select_column ::= table_name T_DOT T_STAR", # 147
        "select_column ::= table_name T_DOT T_LROUND query T_RROUND", # 148
        "select_column ::= expression as", # 149
        "as ::=", # 150
        "as ::= K_AS L_NAME", # 151
        "from_sel_opt ::=", # 152
        "from_sel_opt ::= K_FROM select_tables", # 153
        "from_est ::= K_FROM population_name", # 154
        "from_est ::= K_FROM K_PAIRWISE population_name", # 155
        "from_est ::= K_FROM K_COLUMNS|K_VARIABLES K_OF population_name", # 156
        "from_est ::= K_FROM K_PAIRWISE K_COLUMNS|K_VARIABLES K_OF population_name for", # 157
        "modeledby_opt ::=", # 158
        "modeledby_opt ::= K_MODELED|K_MODELLED K_BY generator_name", # 159
        "usingmodel_opt ::=", # 160
        "usingmodel_opt ::= K_USING model_token modelset", # 161
        "select_tables ::= select_table", # 162
        "select_tables ::= select_tables T_COMMA select_table", # 163
        "select_table ::= table_name as", # 164
        "select_table ::= T_LROUND query T_RROUND as", # 165
        "for ::=", # 166
        "for ::= K_FOR column_lists", # 167
        "where ::=", # 168
        "where ::= K_WHERE expression", # 169
        "column_name ::= L_NAME", # 170
        "generator_name ::= L_NAME", # 171
        "backend_name ::= L_NAME", # 172
        "population_name ::= L_NAME", # 173
        "table_name ::= L_NAME", # 174
        "model_token ::= K_MODEL", # 175
        "model_token ::= K_MODELS", # 176
        "group_by ::=", # 177
        "group_by ::= K_GROUP K_BY expressions", # 178
        "group_by ::= K_GROUP K_BY expressions K_HAVING expression", # 179
        "order_by ::=", # 180
        "order_by ::= K_ORDER K_BY order_keys", # 181
        "order_keys ::= order_key", # 182
        "order_keys ::= order_keys T_COMMA order_key", # 183
        "order_key ::= expression order_sense", # 184
        "order_sense ::=", # 185
        "order_sense ::= K_ASC", # 186
        "order_sense ::= K_DESC", # 187
        "accuracy_opt ::=", # 188
        "accuracy_opt ::= K_ACCURACY L_INTEGER", # 189
        "limit_opt ::=", # 190
        "limit_opt ::= limit", # 191
        "limit ::= K_LIMIT expression", # 192
        "limit ::= K_LIMIT expression K_OFFSET expression", # 193
        "limit ::= K_LIMIT expression T_COMMA expression", # 194
        "expressions_opt ::=", # 195
        "expressions_opt ::= expressions", # 196
        "expressions ::= expression", # 197
        "expressions ::= expressions T_COMMA expression", # 198
        "expression ::= boolean_or", # 199
        "boolean_or ::= boolean_or K_OR boolean_and", # 200
        "boolean_or ::= boolean_and", # 201
        "boolean_and ::= boolean_and K_AND boolean_not", # 202
        "boolean_and ::= boolean_not", # 203
        "boolean_not ::= K_NOT boolean_not", # 204
        "boolean_not ::= equality", # 205
        "equality ::= equality K_IS ordering", # 206
        "equality ::= equality K_IS K_NOT ordering", # 207
        "equality ::= equality K_LIKE ordering", # 208
        "equality ::= equality K_NOT K_LIKE ordering", # 209
        "equality ::= equality K_LIKE ordering K_ESCAPE ordering", # 210
        "equality ::= equality K_NOT K_LIKE ordering K_ESCAPE ordering", # 211
        "equality ::= equality K_GLOB ordering", # 212
        "equality ::= equality K_NOT K_GLOB ordering", # 213
        "equality ::= equality K_GLOB ordering K_ESCAPE ordering", # 214
        "equality ::= equality K_NOT K_GLOB ordering K_ESCAPE ordering", # 215
        "equality ::= equality K_REGEXP ordering", # 216
        "equality ::= equality K_NOT K_REGEXP ordering", # 217
        "equality ::= equality K_REGEXP ordering K_ESCAPE ordering", # 218
        "equality ::= equality K_NOT K_REGEXP ordering K_ESCAPE ordering", # 219
        "equality ::= equality K_MATCH ordering", # 220
        "equality ::= equality K_NOT K_MATCH ordering", # 221
        "equality ::= equality K_MATCH ordering K_ESCAPE ordering", # 222
        "equality ::= equality K_NOT K_MATCH ordering K_ESCAPE ordering", # 223
        "equality ::= equality K_BETWEEN ordering K_AND ordering", # 224
        "equality ::= equality K_NOT K_BETWEEN ordering K_AND ordering", # 225
        "equality ::= equality K_IN T_LROUND query T_RROUND", # 226
        "equality ::= equality K_NOT K_IN T_LROUND query T_RROUND", # 227
        "equality ::= equality K_IN T_LROUND expressions_opt T_RROUND", # 228
        "equality ::= equality K_NOT K_IN T_LROUND expressions_opt T_RROUND", # 229
        "equality ::= equality K_ISNULL", # 230
        "equality ::= equality K_NOTNULL", # 231
        "equality ::= equality T_NEQ ordering", # 232
        "equality ::= equality T_EQ ordering", # 233
        "equality ::= ordering", # 234
        "ordering ::= ordering T_LT bitwise", # 235
        "ordering ::= ordering T_LEQ bitwise", # 236
        "ordering ::= ordering T_GEQ bitwise", # 237
        "ordering ::= ordering T_GT bitwise", # 238
        "ordering ::= bitwise", # 239
        "bitwise ::= bitwise T_BITAND additive", # 240
        "bitwise ::= bitwise T_BITIOR additive", # 241
        "bitwise ::= bitwise T_LSHIFT additive", # 242
        "bitwise ::= bitwise T_RSHIFT additive", # 243
        "bitwise ::= additive", # 244
        "additive ::= additive T_PLUS multiplicative", # 245
        "additive ::= additive T_MINUS multiplicative", # 246
        "additive ::= multiplicative", # 247
        "multiplicative ::= multiplicative T_STAR concatenative", # 248
        "multiplicative ::= multiplicative T_SLASH concatenative", # 249
        "multiplicative ::= multiplicative T_PERCENT concatenative", # 250
        "multiplicative ::= concatenative", # 251
        "concatenative ::= concatenative T_CONCAT collating", # 252
        "concatenative ::= collating", # 253
        "collating ::= collating K_COLLATE L_NAME|L_STRING", # 254
        "collating ::= unary", # 255
        "unary ::= T_BITNOT unary", # 256
        "unary ::= T_MINUS unary", # 257
        "unary ::= T_PLUS unary", # 258
        "unary ::= bqlfn", # 259
        "bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF column_list", # 260
        "bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF T_LROUND column_lists T_RROUND", # 261
        "bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF column_list K_GIVEN T_LROUND column_lists T_RROUND", # 262
        "bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF T_LROUND column_lists T_RROUND K_GIVEN T_LROUND column_lists T_RROUND", # 263
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF column_name T_EQ unary", # 264
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF T_LROUND constraints_opt T_RROUND", # 265
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF column_name T_EQ primary K_GIVEN T_LROUND constraints_opt T_RROUND", # 266
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF T_LROUND constraints_opt T_RROUND K_GIVEN T_LROUND constraints_opt T_RROUND", # 267
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF K_VALUE unary", # 268
        "bqlfn ::= K_PROBABILITY K_DENSITY K_OF K_VALUE primary K_GIVEN T_LROUND constraints_opt T_RROUND", # 269
        "bqlfn ::= K_SIMILARITY K_OF T_LROUND expression T_RROUND K_TO T_LROUND expression T_RROUND wrt", # 270
        "bqlfn ::= K_SIMILARITY K_TO T_LROUND expression T_RROUND wrt", # 271
        "bqlfn ::= K_SIMILARITY wrt", # 272
        "bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO existing_rows wrt", # 273
        "bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO hypothetical_rows wrt", # 274
        "bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO existing_rows K_AND hypothetical_rows wrt", # 275
        "bqlfn ::= K_DEPENDENCE K_PROBABILITY ofwith", # 276
        "bqlfn ::= K_MUTUAL K_INFORMATION ofwithmulti mi_given_opt nsamples_opt", # 277
        "bqlfn ::= K_PROBABILITY K_OF T_LROUND expression T_RROUND", # 278
        "predrel_of_opt ::=", # 279
        "predrel_of_opt ::= K_OF T_LROUND expression T_RROUND", # 280
        "existing_rows ::= K_EXISTING K_ROWS T_LROUND expression T_RROUND", # 281
        "hypothetical_rows ::= K_HYPOTHETICAL K_ROWS K_WITH K_VALUES T_LROUND constraints_list T_RROUND", # 282
        "ofwithmulti ::=", # 283
        "ofwithmulti ::= K_WITH mi_columns", # 284
        "ofwithmulti ::= K_OF mi_columns K_WITH mi_columns", # 285
        "mi_columns ::= column_name", # 286
        "mi_columns ::= T_LROUND mi_column_list T_RROUND", # 287
        "mi_column_list ::= column_name", # 288
        "mi_column_list ::= mi_column_list T_COMMA column_name", # 289
        "mi_given_opt ::=", # 290
        "mi_given_opt ::= K_GIVEN T_LROUND mi_constraints T_RROUND", # 291
        "mi_constraints ::= mi_constraint", # 292
        "mi_constraints ::= mi_constraints T_COMMA mi_constraint", # 293
        "mi_constraint ::= column_name T_EQ expression", # 294
        "mi_constraint ::= column_name", # 295
        "bqlfn ::= K_CORRELATION ofwith", # 296
        "bqlfn ::= K_CORRELATION K_PVALUE ofwith", # 297
        "bqlfn ::= K_PREDICT column_name withconf nsamples_opt", # 298
        "bqlfn ::= primary", # 299
        "wrt ::= K_IN K_THE K_CONTEXT K_OF column_list", # 300
        "ofwith ::=", # 301
        "ofwith ::= K_WITH column_name", # 302
        "ofwith ::= K_OF column_name K_WITH column_name", # 303
        "nsamples_opt ::=", # 304
        "nsamples_opt ::= K_USING primary K_SAMPLES", # 305
        "column_lists ::= column_list", # 306
        "column_lists ::= column_lists T_COMMA|K_AND column_list", # 307
        "column_list ::= T_STAR", # 308
        "column_list ::= column_name", # 309
        "column_list ::= T_LROUND query T_RROUND", # 310
        "primary ::= literal", # 311
        "primary ::= L_NUMPAR", # 312
        "primary ::= L_NAMPAR", # 313
        "primary ::= L_NAME T_LROUND expressions_opt T_RROUND", # 314
        "primary ::= L_NAME T_LROUND K_DISTINCT expressions_opt T_RROUND", # 315
        "primary ::= L_NAME T_LROUND T_STAR T_RROUND", # 316
        "primary ::= T_LROUND expression T_RROUND", # 317
        "primary ::= T_LROUND query T_RROUND", # 318
        "primary ::= K_CAST T_LROUND expression K_AS type T_RROUND", # 319
        "primary ::= K_EXISTS T_LROUND query T_RROUND", # 320
        "primary ::= column_name", # 321
        "primary ::= table_name T_DOT column_name", # 322
        "primary ::= K_CASE case_key_opt case_whens_opt case_else_opt K_END", # 323
        "case_key_opt ::=", # 324
        "case_key_opt ::= expression", # 325
        "case_whens_opt ::=", # 326
        "case_whens_opt ::= case_whens_opt K_WHEN expression K_THEN expression", # 327
        "case_else_opt ::=", # 328
        "case_else_opt ::= K_ELSE expression", # 329
        "literal ::= K_NULL", # 330
        "literal ::= L_INTEGER", # 331
        "literal ::= L_FLOAT", # 332
        "literal ::= L_STRING", # 333
        "type ::= typename", # 334
        "type ::= typename T_LROUND typearg T_RROUND", # 335
        "type ::= typename T_LROUND typearg T_COMMA typearg T_RROUND", # 336
        "typename ::= L_NAME", # 337
        "typename ::= typename L_NAME", # 338
        "typearg ::= L_INTEGER", # 339
        "typearg ::= T_PLUS L_INTEGER", # 340
        "typearg ::= T_MINUS L_INTEGER", # 341
        ]


    def __init__(self, delegate):
        self.yystack = [] # The parser's stack
        self.delegate = delegate
        return


    def yy_pop_parser_stack(self):
        """Pop the parser's stack once. Return the major token number
        for the symbol popped.
        """
        if not self.yystack:
            return 0
        yytos = self.yystack.pop()
        if self.yyTraceFILE:
            self.yyTraceFILE.write("%sPopping %s\n" % (
                self.yyTracePrompt,
                self.yyTokenName[yytos.major]))
        yymajor = yytos.major
        return yymajor


    def yy_find_shift_action(self,       # The parser
                             iLookAhead  # The look-ahead token
                             ):
        '''Find the appropriate action for a parser given the terminal
        look-ahead token iLookAhead.

        If the look-ahead token is YYNOCODE, then check to see if the
        action is independent of the look-ahead.  If it is, return the
        action, otherwise return YY_NO_ACTION.
        '''
        yyTraceFILE = self.yyTraceFILE
        stateno = self.yystack[-1].stateno
        if stateno > self.YY_SHIFT_COUNT:
            return self.yy_default[stateno]
        i = self.yy_shift_ofst[stateno]
        if i == self.YY_SHIFT_USE_DFLT:
            return self.yy_default[stateno]
        assert iLookAhead != self.YYNOCODE
        i += iLookAhead
        if i < 0 or i >= self.YY_ACTTAB_COUNT or self.yy_lookahead[i] != iLookAhead:
            if iLookAhead > 0:
                yyFallback = self.yyFallback
                yyTokenName = self.yyTokenName
                if iLookAhead < len(yyFallback):
                    iFallback = yyFallback[iLookAhead] # Fallback token
                    if iFallback != 0:
                        if yyTraceFILE:
                            yyTraceFILE.write(
                                "%sFALLBACK %s => %s\n" %
                                (self.yyTracePrompt,
                                 yyTokenName[iLookAhead], yyTokenName[iFallback]))
                        return self.yy_find_shift_action(iFallback);
                YYWILDCARD = self.YYWILDCARD
                if YYWILDCARD is not None:
                    j = i - iLookAhead + YYWILDCARD
                    # [TRC 20150122: Lemon avoids generating tests
                    # against j if they can never fail, based on
                    # compile-time values here, presumably to limit
                    # compiler warnings.  Not so easy to do in Python
                    # so we'll just skip that.]
                    if j >= 0 and j < self.YY_ACTTAB_COUNT and self.yy_lookahead[j] == YYWILDCARD:
                        if yyTraceFILE:
                            yyTraceFILE.write(
                                "%sWILDCARD %s => %s\n" %
                                (self.yyTracePrompt,
                                 yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]))
                        return self.yy_action[j];
            return self.yy_default[stateno]
        else:
            return self.yy_action[i]


    def yy_find_reduce_action(self,
                              stateno,    # Current state number
                              iLookAhead  # The look-ahead token
                              ):
        '''Find the appropriate action for a parser given the
        non-terminal look-ahead token iLookAhead.
        
        If the look-ahead token is YYNOCODE, then check to see if the
        action is independent of the look-ahead.  If it is, return the
        action, otherwise return YY_NO_ACTION.
        '''
        YYERRORSYMBOL = self.YYERRORSYMBOL
        if YYERRORSYMBOL is not None:
            if stateno > self.YY_REDUCE_COUNT:
                return self.yy_default[stateno]
        else:
            assert stateno <= self.YY_REDUCE_COUNT
        i = self.yy_reduce_ofst[stateno]
        assert i != self.YY_REDUCE_USE_DFLT
        assert iLookAhead != self.YYNOCODE
        i += iLookAhead
        if YYERRORSYMBOL is not None:
            if i < 0 or i >= self.YY_ACTTAB_COUNT or self.yy_lookahead[i] != iLookAhead:
                return self.yy_default[stateno]
        else:
            assert i >= 0 and i < self.YY_ACTTAB_COUNT
            assert self.yy_lookahead[i] == iLookAhead
        return self.yy_action[i]


    def yy_shift(self,        # The parser to be shifted
                 yyNewState,  # The new state to shift in
                 yyMajor,     # The major token to shift in
                 yyMinor      # The minor token to shift in
                 ):
        '''Perform a shift action.'''

        yytos = self.yyStackEntry(
            stateno = yyNewState,
            major = yyMajor,
            minor = yyMinor
            )
        self.yystack.append(yytos)

        yyTraceFILE = self.yyTraceFILE
        if yyTraceFILE:
            yyTraceFILE.write("%sShift %d\n" % (self.yyTracePrompt, yyNewState))
            yyTraceFILE.write("%sStack:" % self.yyTracePrompt)
            for entry in self.yystack:
                yyTraceFILE.write(" %s" % self.yyTokenName[entry.major])
            yyTraceFILE.write("\n")

        return


    # The following table contains information about every rule that
    # is used during the reduce.
    from collections import namedtuple
    yyRuleInfoEntry = namedtuple(
        'yyRuleInfoEntry',
        ('lhs',  # Symbol on the left-hand side of the rule
         'nrhs', # Number of right-hand side symbols in the rule
         ))
    yyRuleInfo = [
        yyRuleInfoEntry( 146, 1 ),
        yyRuleInfoEntry( 147, 0 ),
        yyRuleInfoEntry( 147, 3 ),
        yyRuleInfoEntry( 148, 0 ),
        yyRuleInfoEntry( 148, 1 ),
        yyRuleInfoEntry( 149, 1 ),
        yyRuleInfoEntry( 149, 1 ),
        yyRuleInfoEntry( 150, 1 ),
        yyRuleInfoEntry( 150, 1 ),
        yyRuleInfoEntry( 150, 1 ),
        yyRuleInfoEntry( 150, 7 ),
        yyRuleInfoEntry( 150, 7 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 157, 1 ),
        yyRuleInfoEntry( 157, 3 ),
        yyRuleInfoEntry( 158, 3 ),
        yyRuleInfoEntry( 158, 5 ),
        yyRuleInfoEntry( 159, 0 ),
        yyRuleInfoEntry( 159, 1 ),
        yyRuleInfoEntry( 155, 1 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 150, 10 ),
        yyRuleInfoEntry( 150, 9 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 162, 0 ),
        yyRuleInfoEntry( 162, 2 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 164, 1 ),
        yyRuleInfoEntry( 164, 3 ),
        yyRuleInfoEntry( 165, 3 ),
        yyRuleInfoEntry( 165, 6 ),
        yyRuleInfoEntry( 165, 4 ),
        yyRuleInfoEntry( 163, 1 ),
        yyRuleInfoEntry( 163, 3 ),
        yyRuleInfoEntry( 169, 0 ),
        yyRuleInfoEntry( 169, 2 ),
        yyRuleInfoEntry( 169, 6 ),
        yyRuleInfoEntry( 169, 2 ),
        yyRuleInfoEntry( 169, 3 ),
        yyRuleInfoEntry( 168, 0 ),
        yyRuleInfoEntry( 168, 1 ),
        yyRuleInfoEntry( 167, 1 ),
        yyRuleInfoEntry( 171, 3 ),
        yyRuleInfoEntry( 171, 1 ),
        yyRuleInfoEntry( 166, 1 ),
        yyRuleInfoEntry( 166, 3 ),
        yyRuleInfoEntry( 170, 0 ),
        yyRuleInfoEntry( 170, 2 ),
        yyRuleInfoEntry( 150, 8 ),
        yyRuleInfoEntry( 150, 7 ),
        yyRuleInfoEntry( 150, 4 ),
        yyRuleInfoEntry( 150, 5 ),
        yyRuleInfoEntry( 176, 1 ),
        yyRuleInfoEntry( 176, 3 ),
        yyRuleInfoEntry( 177, 3 ),
        yyRuleInfoEntry( 177, 1 ),
        yyRuleInfoEntry( 173, 0 ),
        yyRuleInfoEntry( 173, 2 ),
        yyRuleInfoEntry( 174, 0 ),
        yyRuleInfoEntry( 174, 3 ),
        yyRuleInfoEntry( 180, 1 ),
        yyRuleInfoEntry( 180, 3 ),
        yyRuleInfoEntry( 178, 0 ),
        yyRuleInfoEntry( 178, 2 ),
        yyRuleInfoEntry( 181, 3 ),
        yyRuleInfoEntry( 181, 1 ),
        yyRuleInfoEntry( 150, 6 ),
        yyRuleInfoEntry( 150, 6 ),
        yyRuleInfoEntry( 150, 5 ),
        yyRuleInfoEntry( 152, 0 ),
        yyRuleInfoEntry( 152, 1 ),
        yyRuleInfoEntry( 156, 0 ),
        yyRuleInfoEntry( 156, 2 ),
        yyRuleInfoEntry( 153, 0 ),
        yyRuleInfoEntry( 153, 3 ),
        yyRuleInfoEntry( 183, 0 ),
        yyRuleInfoEntry( 183, 2 ),
        yyRuleInfoEntry( 175, 0 ),
        yyRuleInfoEntry( 175, 4 ),
        yyRuleInfoEntry( 187, 0 ),
        yyRuleInfoEntry( 187, 1 ),
        yyRuleInfoEntry( 188, 1 ),
        yyRuleInfoEntry( 188, 3 ),
        yyRuleInfoEntry( 189, 1 ),
        yyRuleInfoEntry( 189, 3 ),
        yyRuleInfoEntry( 184, 2 ),
        yyRuleInfoEntry( 184, 4 ),
        yyRuleInfoEntry( 185, 0 ),
        yyRuleInfoEntry( 185, 2 ),
        yyRuleInfoEntry( 190, 2 ),
        yyRuleInfoEntry( 190, 2 ),
        yyRuleInfoEntry( 190, 2 ),
        yyRuleInfoEntry( 186, 0 ),
        yyRuleInfoEntry( 186, 3 ),
        yyRuleInfoEntry( 191, 0 ),
        yyRuleInfoEntry( 191, 2 ),
        yyRuleInfoEntry( 192, 3 ),
        yyRuleInfoEntry( 192, 1 ),
        yyRuleInfoEntry( 150, 11 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 151, 1 ),
        yyRuleInfoEntry( 197, 8 ),
        yyRuleInfoEntry( 198, 10 ),
        yyRuleInfoEntry( 200, 4 ),
        yyRuleInfoEntry( 201, 5 ),
        yyRuleInfoEntry( 202, 4 ),
        yyRuleInfoEntry( 199, 7 ),
        yyRuleInfoEntry( 203, 12 ),
        yyRuleInfoEntry( 203, 11 ),
        yyRuleInfoEntry( 212, 1 ),
        yyRuleInfoEntry( 212, 3 ),
        yyRuleInfoEntry( 215, 1 ),
        yyRuleInfoEntry( 215, 2 ),
        yyRuleInfoEntry( 213, 0 ),
        yyRuleInfoEntry( 213, 1 ),
        yyRuleInfoEntry( 217, 3 ),
        yyRuleInfoEntry( 214, 1 ),
        yyRuleInfoEntry( 214, 3 ),
        yyRuleInfoEntry( 219, 1 ),
        yyRuleInfoEntry( 219, 5 ),
        yyRuleInfoEntry( 221, 0 ),
        yyRuleInfoEntry( 221, 2 ),
        yyRuleInfoEntry( 204, 9 ),
        yyRuleInfoEntry( 204, 7 ),
        yyRuleInfoEntry( 222, 0 ),
        yyRuleInfoEntry( 222, 2 ),
        yyRuleInfoEntry( 225, 1 ),
        yyRuleInfoEntry( 225, 3 ),
        yyRuleInfoEntry( 226, 3 ),
        yyRuleInfoEntry( 228, 0 ),
        yyRuleInfoEntry( 228, 1 ),
        yyRuleInfoEntry( 229, 3 ),
        yyRuleInfoEntry( 229, 5 ),
        yyRuleInfoEntry( 204, 7 ),
        yyRuleInfoEntry( 205, 1 ),
        yyRuleInfoEntry( 205, 1 ),
        yyRuleInfoEntry( 205, 0 ),
        yyRuleInfoEntry( 193, 1 ),
        yyRuleInfoEntry( 193, 3 ),
        yyRuleInfoEntry( 220, 1 ),
        yyRuleInfoEntry( 220, 3 ),
        yyRuleInfoEntry( 220, 5 ),
        yyRuleInfoEntry( 220, 2 ),
        yyRuleInfoEntry( 216, 0 ),
        yyRuleInfoEntry( 216, 2 ),
        yyRuleInfoEntry( 206, 0 ),
        yyRuleInfoEntry( 206, 2 ),
        yyRuleInfoEntry( 211, 2 ),
        yyRuleInfoEntry( 211, 3 ),
        yyRuleInfoEntry( 211, 4 ),
        yyRuleInfoEntry( 211, 6 ),
        yyRuleInfoEntry( 195, 0 ),
        yyRuleInfoEntry( 195, 3 ),
        yyRuleInfoEntry( 196, 0 ),
        yyRuleInfoEntry( 196, 3 ),
        yyRuleInfoEntry( 230, 1 ),
        yyRuleInfoEntry( 230, 3 ),
        yyRuleInfoEntry( 232, 2 ),
        yyRuleInfoEntry( 232, 4 ),
        yyRuleInfoEntry( 231, 0 ),
        yyRuleInfoEntry( 231, 2 ),
        yyRuleInfoEntry( 207, 0 ),
        yyRuleInfoEntry( 207, 2 ),
        yyRuleInfoEntry( 160, 1 ),
        yyRuleInfoEntry( 172, 1 ),
        yyRuleInfoEntry( 179, 1 ),
        yyRuleInfoEntry( 161, 1 ),
        yyRuleInfoEntry( 154, 1 ),
        yyRuleInfoEntry( 182, 1 ),
        yyRuleInfoEntry( 182, 1 ),
        yyRuleInfoEntry( 208, 0 ),
        yyRuleInfoEntry( 208, 3 ),
        yyRuleInfoEntry( 208, 5 ),
        yyRuleInfoEntry( 209, 0 ),
        yyRuleInfoEntry( 209, 3 ),
        yyRuleInfoEntry( 235, 1 ),
        yyRuleInfoEntry( 235, 3 ),
        yyRuleInfoEntry( 236, 2 ),
        yyRuleInfoEntry( 237, 0 ),
        yyRuleInfoEntry( 237, 1 ),
        yyRuleInfoEntry( 237, 1 ),
        yyRuleInfoEntry( 224, 0 ),
        yyRuleInfoEntry( 224, 2 ),
        yyRuleInfoEntry( 210, 0 ),
        yyRuleInfoEntry( 210, 1 ),
        yyRuleInfoEntry( 223, 2 ),
        yyRuleInfoEntry( 223, 4 ),
        yyRuleInfoEntry( 223, 4 ),
        yyRuleInfoEntry( 238, 0 ),
        yyRuleInfoEntry( 238, 1 ),
        yyRuleInfoEntry( 234, 1 ),
        yyRuleInfoEntry( 234, 3 ),
        yyRuleInfoEntry( 227, 1 ),
        yyRuleInfoEntry( 239, 3 ),
        yyRuleInfoEntry( 239, 1 ),
        yyRuleInfoEntry( 240, 3 ),
        yyRuleInfoEntry( 240, 1 ),
        yyRuleInfoEntry( 241, 2 ),
        yyRuleInfoEntry( 241, 1 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 4 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 4 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 4 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 4 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 4 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 5 ),
        yyRuleInfoEntry( 242, 6 ),
        yyRuleInfoEntry( 242, 2 ),
        yyRuleInfoEntry( 242, 2 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 3 ),
        yyRuleInfoEntry( 242, 1 ),
        yyRuleInfoEntry( 243, 3 ),
        yyRuleInfoEntry( 243, 3 ),
        yyRuleInfoEntry( 243, 3 ),
        yyRuleInfoEntry( 243, 3 ),
        yyRuleInfoEntry( 243, 1 ),
        yyRuleInfoEntry( 244, 3 ),
        yyRuleInfoEntry( 244, 3 ),
        yyRuleInfoEntry( 244, 3 ),
        yyRuleInfoEntry( 244, 3 ),
        yyRuleInfoEntry( 244, 1 ),
        yyRuleInfoEntry( 245, 3 ),
        yyRuleInfoEntry( 245, 3 ),
        yyRuleInfoEntry( 245, 1 ),
        yyRuleInfoEntry( 246, 3 ),
        yyRuleInfoEntry( 246, 3 ),
        yyRuleInfoEntry( 246, 3 ),
        yyRuleInfoEntry( 246, 1 ),
        yyRuleInfoEntry( 247, 3 ),
        yyRuleInfoEntry( 247, 1 ),
        yyRuleInfoEntry( 248, 3 ),
        yyRuleInfoEntry( 248, 1 ),
        yyRuleInfoEntry( 249, 2 ),
        yyRuleInfoEntry( 249, 2 ),
        yyRuleInfoEntry( 249, 2 ),
        yyRuleInfoEntry( 249, 1 ),
        yyRuleInfoEntry( 250, 4 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 8 ),
        yyRuleInfoEntry( 250, 10 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 10 ),
        yyRuleInfoEntry( 250, 10 ),
        yyRuleInfoEntry( 250, 5 ),
        yyRuleInfoEntry( 250, 9 ),
        yyRuleInfoEntry( 250, 10 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 2 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 6 ),
        yyRuleInfoEntry( 250, 8 ),
        yyRuleInfoEntry( 250, 3 ),
        yyRuleInfoEntry( 250, 5 ),
        yyRuleInfoEntry( 250, 5 ),
        yyRuleInfoEntry( 253, 0 ),
        yyRuleInfoEntry( 253, 4 ),
        yyRuleInfoEntry( 254, 5 ),
        yyRuleInfoEntry( 255, 7 ),
        yyRuleInfoEntry( 257, 0 ),
        yyRuleInfoEntry( 257, 2 ),
        yyRuleInfoEntry( 257, 4 ),
        yyRuleInfoEntry( 259, 1 ),
        yyRuleInfoEntry( 259, 3 ),
        yyRuleInfoEntry( 260, 1 ),
        yyRuleInfoEntry( 260, 3 ),
        yyRuleInfoEntry( 258, 0 ),
        yyRuleInfoEntry( 258, 4 ),
        yyRuleInfoEntry( 261, 1 ),
        yyRuleInfoEntry( 261, 3 ),
        yyRuleInfoEntry( 262, 3 ),
        yyRuleInfoEntry( 262, 1 ),
        yyRuleInfoEntry( 250, 2 ),
        yyRuleInfoEntry( 250, 3 ),
        yyRuleInfoEntry( 250, 4 ),
        yyRuleInfoEntry( 250, 1 ),
        yyRuleInfoEntry( 252, 5 ),
        yyRuleInfoEntry( 256, 0 ),
        yyRuleInfoEntry( 256, 2 ),
        yyRuleInfoEntry( 256, 4 ),
        yyRuleInfoEntry( 194, 0 ),
        yyRuleInfoEntry( 194, 3 ),
        yyRuleInfoEntry( 233, 1 ),
        yyRuleInfoEntry( 233, 3 ),
        yyRuleInfoEntry( 251, 1 ),
        yyRuleInfoEntry( 251, 1 ),
        yyRuleInfoEntry( 251, 3 ),
        yyRuleInfoEntry( 218, 1 ),
        yyRuleInfoEntry( 218, 1 ),
        yyRuleInfoEntry( 218, 1 ),
        yyRuleInfoEntry( 218, 4 ),
        yyRuleInfoEntry( 218, 5 ),
        yyRuleInfoEntry( 218, 4 ),
        yyRuleInfoEntry( 218, 3 ),
        yyRuleInfoEntry( 218, 3 ),
        yyRuleInfoEntry( 218, 6 ),
        yyRuleInfoEntry( 218, 4 ),
        yyRuleInfoEntry( 218, 1 ),
        yyRuleInfoEntry( 218, 3 ),
        yyRuleInfoEntry( 218, 5 ),
        yyRuleInfoEntry( 265, 0 ),
        yyRuleInfoEntry( 265, 1 ),
        yyRuleInfoEntry( 266, 0 ),
        yyRuleInfoEntry( 266, 5 ),
        yyRuleInfoEntry( 267, 0 ),
        yyRuleInfoEntry( 267, 2 ),
        yyRuleInfoEntry( 263, 1 ),
        yyRuleInfoEntry( 263, 1 ),
        yyRuleInfoEntry( 263, 1 ),
        yyRuleInfoEntry( 263, 1 ),
        yyRuleInfoEntry( 264, 1 ),
        yyRuleInfoEntry( 264, 4 ),
        yyRuleInfoEntry( 264, 6 ),
        yyRuleInfoEntry( 268, 1 ),
        yyRuleInfoEntry( 268, 2 ),
        yyRuleInfoEntry( 269, 1 ),
        yyRuleInfoEntry( 269, 2 ),
        yyRuleInfoEntry( 269, 2 ),
        ]


    # Action code for each rule follows.
    def action_000(self):
        # bql ::= phrases
        return self.delegate.p_bql_start(
            phrases = self.yystack[-1].minor,
            )
    def action_001(self):
        # phrases ::=
        return self.delegate.p_phrases_none(
            )
    def action_002(self):
        # phrases ::= phrases phrase_opt T_SEMI
        return self.delegate.p_phrases_some(
            phrases = self.yystack[-3].minor,
            phrase = self.yystack[-2].minor,
            )
    def action_003(self):
        # phrase_opt ::=
        return self.delegate.p_phrase_opt_none(
            )
    def action_004(self):
        # phrase_opt ::= phrase
        return self.delegate.p_phrase_opt_some(
            phrase = self.yystack[-1].minor,
            )
    def action_005(self):
        # phrase ::= command
        return self.delegate.p_phrase_command(
            c = self.yystack[-1].minor,
            )
    def action_006(self):
        # phrase ::= query
        return self.delegate.p_phrase_query(
            q = self.yystack[-1].minor,
            )
    def action_007(self):
        # command ::= K_BEGIN
        return self.delegate.p_command_begin(
            )
    def action_008(self):
        # command ::= K_ROLLBACK
        return self.delegate.p_command_rollback(
            )
    def action_009(self):
        # command ::= K_COMMIT
        return self.delegate.p_command_commit(
            )
    def action_010(self):
        # command ::= K_CREATE temp_opt K_TABLE ifnotexists table_name K_AS query
        return self.delegate.p_command_createtab_as(
            temp = self.yystack[-6].minor,
            ifnotexists = self.yystack[-4].minor,
            name = self.yystack[-3].minor,
            query = self.yystack[-1].minor,
            )
    def action_011(self):
        # command ::= K_CREATE temp_opt K_TABLE ifnotexists table_name K_FROM pathname
        return self.delegate.p_command_createtab_csv(
            temp = self.yystack[-6].minor,
            ifnotexists = self.yystack[-4].minor,
            name = self.yystack[-3].minor,
            csv = self.yystack[-1].minor,
            )
    def action_012(self):
        # command ::= K_DROP K_TABLE ifexists table_name
        return self.delegate.p_command_droptab(
            ifexists = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_013(self):
        # command ::= K_ALTER K_TABLE table_name altertab_cmds
        return self.delegate.p_command_altertab(
            table = self.yystack[-2].minor,
            cmds = self.yystack[-1].minor,
            )
    def action_014(self):
        # altertab_cmds ::= altertab_cmd
        return self.delegate.p_altertab_cmds_one(
            cmd = self.yystack[-1].minor,
            )
    def action_015(self):
        # altertab_cmds ::= altertab_cmds T_COMMA altertab_cmd
        return self.delegate.p_altertab_cmds_many(
            cmds = self.yystack[-3].minor,
            cmd = self.yystack[-1].minor,
            )
    def action_016(self):
        # altertab_cmd ::= K_RENAME K_TO table_name
        return self.delegate.p_altertab_cmd_renametab(
            name = self.yystack[-1].minor,
            )
    def action_017(self):
        # altertab_cmd ::= K_RENAME k_column_opt column_name K_TO column_name
        return self.delegate.p_altertab_cmd_renamecol(
            old = self.yystack[-3].minor,
            new = self.yystack[-1].minor,
            )
    def action_018(self):
        # k_column_opt ::=
        return None
    def action_019(self):
        # k_column_opt ::= K_COLUMN
        return None
    def action_020(self):
        # pathname ::= L_STRING
        return self.delegate.p_pathname_p(
            name = self.yystack[-1].minor,
            )
    def action_021(self):
        # command ::= K_GUESS K_SCHEMA K_FOR table_name
        return self.delegate.p_command_guess_schema(
            table = self.yystack[-1].minor,
            )
    def action_022(self):
        # command ::= K_CREATE K_POPULATION ifnotexists population_name K_FOR table_name with_schema_opt T_LROUND|T_LCURLY pop_schema T_RROUND|T_RCURLY
        return self.delegate.p_command_create_pop(
            ifnotexists = self.yystack[-8].minor,
            name = self.yystack[-7].minor,
            table = self.yystack[-5].minor,
            schema = self.yystack[-2].minor,
            )
    def action_023(self):
        # command ::= K_CREATE K_POPULATION ifnotexists K_FOR table_name with_schema_opt T_LROUND|T_LCURLY pop_schema T_RROUND|T_RCURLY
        return self.delegate.p_command_create_pop_implicit(
            ifnotexists = self.yystack[-7].minor,
            table = self.yystack[-5].minor,
            schema = self.yystack[-2].minor,
            )
    def action_024(self):
        # command ::= K_DROP K_POPULATION ifexists population_name
        return self.delegate.p_command_drop_pop(
            ifexists = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_025(self):
        # with_schema_opt ::=
        return None
    def action_026(self):
        # with_schema_opt ::= K_WITH K_SCHEMA
        return None
    def action_027(self):
        # command ::= K_ALTER K_POPULATION population_name alterpop_cmds
        return self.delegate.p_command_alterpop(
            population = self.yystack[-2].minor,
            cmds = self.yystack[-1].minor,
            )
    def action_028(self):
        # alterpop_cmds ::= alterpop_cmd
        return self.delegate.p_alterpop_cmds_one(
            cmd = self.yystack[-1].minor,
            )
    def action_029(self):
        # alterpop_cmds ::= alterpop_cmds T_COMMA alterpop_cmd
        return self.delegate.p_alterpop_cmds_many(
            cmds = self.yystack[-3].minor,
            cmd = self.yystack[-1].minor,
            )
    def action_030(self):
        # alterpop_cmd ::= K_RENAME K_TO population_name
        return self.delegate.p_alterpop_cmd_renamepop(
            name = self.yystack[-1].minor,
            )
    def action_031(self):
        # alterpop_cmd ::= K_SET K_STATTYPES|K_STATTYPE K_OF pop_columns K_TO stattype
        return self.delegate.p_alterpop_cmd_stattype(
            cols = self.yystack[-3].minor,
            stattype = self.yystack[-1].minor,
            )
    def action_032(self):
        # alterpop_cmd ::= K_ADD K_VARIABLE column_name stattype_opt
        return self.delegate.p_alterpop_cmd_addvar(
            col = self.yystack[-2].minor,
            st = self.yystack[-1].minor,
            )
    def action_033(self):
        # pop_schema ::= pop_clause
        return self.delegate.p_pop_schema_one(
            cl = self.yystack[-1].minor,
            )
    def action_034(self):
        # pop_schema ::= pop_schema T_SEMI pop_clause
        return self.delegate.p_pop_schema_many(
            schema = self.yystack[-3].minor,
            cl = self.yystack[-1].minor,
            )
    def action_035(self):
        # pop_clause ::=
        return self.delegate.p_pop_clause_empty(
            )
    def action_036(self):
        # pop_clause ::= column_name stattype
        return self.delegate.p_pop_clause_column(
            col = self.yystack[-2].minor,
            st = self.yystack[-1].minor,
            )
    def action_037(self):
        # pop_clause ::= K_SET K_STATTYPES|K_STATTYPE K_OF pop_columns K_TO stattype
        return self.delegate.p_pop_clause_stattype(
            cols = self.yystack[-3].minor,
            st = self.yystack[-1].minor,
            )
    def action_038(self):
        # pop_clause ::= K_IGNORE pop_columns
        return self.delegate.p_pop_clause_ignore(
            cols = self.yystack[-1].minor,
            )
    def action_039(self):
        # pop_clause ::= K_GUESS stattypes_of_opt pop_columns_guess
        return self.delegate.p_pop_clause_guess(
            cols = self.yystack[-1].minor,
            )
    def action_040(self):
        # stattype_opt ::=
        return self.delegate.p_stattype_opt_none(
            )
    def action_041(self):
        # stattype_opt ::= stattype
        return self.delegate.p_stattype_opt_one(
            st = self.yystack[-1].minor,
            )
    def action_042(self):
        # stattype ::= L_NAME
        return self.delegate.p_stattype_st(
            name = self.yystack[-1].minor,
            )
    def action_043(self):
        # pop_columns_guess ::= T_LROUND T_STAR T_RROUND
        return self.delegate.p_pop_columns_guess_star(
            )
    def action_044(self):
        # pop_columns_guess ::= pop_columns
        return self.delegate.p_pop_columns_guess_list(
            cols = self.yystack[-1].minor,
            )
    def action_045(self):
        # pop_columns ::= column_name
        return self.delegate.p_pop_columns_one(
            c = self.yystack[-1].minor,
            )
    def action_046(self):
        # pop_columns ::= pop_columns T_COMMA column_name
        return self.delegate.p_pop_columns_many(
            cols = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_047(self):
        # stattypes_of_opt ::=
        return None
    def action_048(self):
        # stattypes_of_opt ::= K_STATTYPE|K_STATTYPES K_OF
        return None
    def action_049(self):
        # command ::= K_CREATE K_GENERATOR ifnotexists generator_name K_FOR population_name backend_name_opt generator_schema_opt
        return self.delegate.p_command_creategen(
            ifnotexists = self.yystack[-6].minor,
            name = self.yystack[-5].minor,
            pop = self.yystack[-3].minor,
            backend = self.yystack[-2].minor,
            schema = self.yystack[-1].minor,
            )
    def action_050(self):
        # command ::= K_CREATE K_GENERATOR ifnotexists K_FOR population_name backend_name_opt generator_schema_opt
        return self.delegate.p_command_creategen_implicit(
            ifnotexists = self.yystack[-5].minor,
            pop = self.yystack[-3].minor,
            backend = self.yystack[-2].minor,
            schema = self.yystack[-1].minor,
            )
    def action_051(self):
        # command ::= K_DROP K_GENERATOR ifexists generator_name
        return self.delegate.p_command_dropgen(
            ifexists = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_052(self):
        # command ::= K_ALTER K_GENERATOR generator_name anmodelset_matched_opt altergen_cmds
        return self.delegate.p_command_altergen(
            generator = self.yystack[-3].minor,
            models = self.yystack[-2].minor,
            cmds = self.yystack[-1].minor,
            )
    def action_053(self):
        # altergen_cmds ::= altergen_cmd
        return self.delegate.p_altergen_cmds_one(
            cmd = self.yystack[-1].minor,
            )
    def action_054(self):
        # altergen_cmds ::= altergen_cmds T_COMMA altergen_cmd
        return self.delegate.p_altergen_cmds_many(
            cmds = self.yystack[-3].minor,
            cmd = self.yystack[-1].minor,
            )
    def action_055(self):
        # altergen_cmd ::= K_RENAME K_TO generator_name
        return self.delegate.p_altergen_cmd_renamegen(
            name = self.yystack[-1].minor,
            )
    def action_056(self):
        # altergen_cmd ::= generator_schemum
        return self.delegate.p_altergen_cmd_generic(
            s = self.yystack[-1].minor,
            )
    def action_057(self):
        # backend_name_opt ::=
        return self.delegate.p_backend_name_opt_none(
            )
    def action_058(self):
        # backend_name_opt ::= K_USING backend_name
        return self.delegate.p_backend_name_opt_one(
            backend = self.yystack[-1].minor,
            )
    def action_059(self):
        # generator_schema_opt ::=
        return self.delegate.p_generator_schema_opt_none(
            )
    def action_060(self):
        # generator_schema_opt ::= T_LROUND|T_LCURLY generator_schema T_RROUND|T_RCURLY
        return self.delegate.p_generator_schema_opt_some(
            s = self.yystack[-2].minor,
            )
    def action_061(self):
        # generator_schema ::= generator_schemum
        return self.delegate.p_generator_schema_one(
            s = self.yystack[-1].minor,
            )
    def action_062(self):
        # generator_schema ::= generator_schema T_COMMA generator_schemum
        return self.delegate.p_generator_schema_many(
            ss = self.yystack[-3].minor,
            s = self.yystack[-1].minor,
            )
    def action_063(self):
        # generator_schemum ::=
        return self.delegate.p_generator_schemum_empty(
            )
    def action_064(self):
        # generator_schemum ::= generator_schemum gs_token
        return self.delegate.p_generator_schemum_nonempty(
            s = self.yystack[-2].minor,
            t = self.yystack[-1].minor,
            )
    def action_065(self):
        # gs_token ::= T_LROUND generator_schemum T_RROUND
        return self.delegate.p_gs_token_comp(
            s = self.yystack[-2].minor,
            )
    def action_066(self):
        # gs_token ::= ANY
        return self.delegate.p_gs_token_prim(
            t = self.yystack[-1].minor,
            )
    def action_067(self):
        # command ::= K_INITIALIZE L_INTEGER model_token ifnotexists K_FOR generator_name
        return self.delegate.p_command_init_models(
            n = self.yystack[-5].minor,
            ifnotexists = self.yystack[-3].minor,
            generator = self.yystack[-1].minor,
            )
    def action_068(self):
        # command ::= K_ANALYZE generator_name anmodelset_opt anlimit anckpt_opt analysis_program_opt
        return self.delegate.p_command_analyze_models(
            generator = self.yystack[-5].minor,
            models = self.yystack[-4].minor,
            anlimit = self.yystack[-3].minor,
            anckpt = self.yystack[-2].minor,
            program = self.yystack[-1].minor,
            )
    def action_069(self):
        # command ::= K_DROP model_token modelset_opt K_FROM generator_name
        return self.delegate.p_command_drop_models(
            models = self.yystack[-3].minor,
            generator = self.yystack[-1].minor,
            )
    def action_070(self):
        # temp_opt ::=
        return self.delegate.p_temp_opt_none(
            )
    def action_071(self):
        # temp_opt ::= K_TEMP|K_TEMPORARY
        return self.delegate.p_temp_opt_some(
            )
    def action_072(self):
        # ifexists ::=
        return self.delegate.p_ifexists_none(
            )
    def action_073(self):
        # ifexists ::= K_IF K_EXISTS
        return self.delegate.p_ifexists_some(
            )
    def action_074(self):
        # ifnotexists ::=
        return self.delegate.p_ifnotexists_none(
            )
    def action_075(self):
        # ifnotexists ::= K_IF K_NOT K_EXISTS
        return self.delegate.p_ifnotexists_some(
            )
    def action_076(self):
        # anmodelset_opt ::=
        return self.delegate.p_anmodelset_opt_none(
            )
    def action_077(self):
        # anmodelset_opt ::= model_token modelset
        return self.delegate.p_anmodelset_opt_some(
            m = self.yystack[-1].minor,
            )
    def action_078(self):
        # anmodelset_matched_opt ::=
        return self.delegate.p_anmodelset_matched_opt_none(
            )
    def action_079(self):
        # anmodelset_matched_opt ::= model_token T_LROUND modelset T_RROUND
        return self.delegate.p_anmodelset_matched_opt_some(
            m = self.yystack[-2].minor,
            )
    def action_080(self):
        # modelset_opt ::=
        return self.delegate.p_modelset_opt_none(
            )
    def action_081(self):
        # modelset_opt ::= modelset
        return self.delegate.p_modelset_opt_some(
            m = self.yystack[-1].minor,
            )
    def action_082(self):
        # modelset ::= modelrange
        return self.delegate.p_modelset_one(
            r = self.yystack[-1].minor,
            )
    def action_083(self):
        # modelset ::= modelset T_COMMA modelrange
        return self.delegate.p_modelset_many(
            m = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_084(self):
        # modelrange ::= L_INTEGER
        return self.delegate.p_modelrange_single(
            modelno = self.yystack[-1].minor,
            )
    def action_085(self):
        # modelrange ::= L_INTEGER T_MINUS L_INTEGER
        return self.delegate.p_modelrange_multi(
            minno = self.yystack[-3].minor,
            maxno = self.yystack[-1].minor,
            )
    def action_086(self):
        # anlimit ::= K_FOR anduration
        return self.delegate.p_anlimit_one(
            duration = self.yystack[-1].minor,
            )
    def action_087(self):
        # anlimit ::= K_FOR anduration K_OR anduration
        return self.delegate.p_anlimit_two(
            duration0 = self.yystack[-3].minor,
            duration1 = self.yystack[-1].minor,
            )
    def action_088(self):
        # anckpt_opt ::=
        return self.delegate.p_anckpt_opt_none(
            )
    def action_089(self):
        # anckpt_opt ::= K_CHECKPOINT anduration
        return self.delegate.p_anckpt_opt_some(
            duration = self.yystack[-1].minor,
            )
    def action_090(self):
        # anduration ::= L_INTEGER K_ITERATION|K_ITERATIONS
        return self.delegate.p_anduration_iterations(
            n = self.yystack[-2].minor,
            )
    def action_091(self):
        # anduration ::= L_INTEGER K_MINUTE|K_MINUTES
        return self.delegate.p_anduration_minutes(
            n = self.yystack[-2].minor,
            )
    def action_092(self):
        # anduration ::= L_INTEGER K_SECOND|K_SECONDS
        return self.delegate.p_anduration_seconds(
            n = self.yystack[-2].minor,
            )
    def action_093(self):
        # analysis_program_opt ::=
        return self.delegate.p_analysis_program_opt_none(
            )
    def action_094(self):
        # analysis_program_opt ::= T_LROUND analysis_program T_RROUND
        return self.delegate.p_analysis_program_opt_some(
            p = self.yystack[-2].minor,
            )
    def action_095(self):
        # analysis_program ::=
        return self.delegate.p_analysis_program_empty(
            )
    def action_096(self):
        # analysis_program ::= analysis_program analysis_token
        return self.delegate.p_analysis_program_nonempty(
            p = self.yystack[-2].minor,
            t = self.yystack[-1].minor,
            )
    def action_097(self):
        # analysis_token ::= T_LROUND analysis_program T_RROUND
        return self.delegate.p_analysis_token_compound(
            p = self.yystack[-2].minor,
            )
    def action_098(self):
        # analysis_token ::= ANY
        return self.delegate.p_analysis_token_primitive(
            t = self.yystack[-1].minor,
            )
    def action_099(self):
        # command ::= K_REGRESS column_name K_GIVEN T_LROUND select_columns T_RROUND nsamples_opt K_BY|K_WITHIN population_name modeledby_opt usingmodel_opt
        return self.delegate.p_command_regress(
            target = self.yystack[-10].minor,
            givens = self.yystack[-7].minor,
            nsamp = self.yystack[-5].minor,
            pop = self.yystack[-3].minor,
            generator = self.yystack[-2].minor,
            modelnos = self.yystack[-1].minor,
            )
    def action_100(self):
        # query ::= select
        return self.delegate.p_query_select(
            q = self.yystack[-1].minor,
            )
    def action_101(self):
        # query ::= estimate
        return self.delegate.p_query_estimate(
            q = self.yystack[-1].minor,
            )
    def action_102(self):
        # query ::= estby
        return self.delegate.p_query_estby(
            q = self.yystack[-1].minor,
            )
    def action_103(self):
        # query ::= estcol
        return self.delegate.p_query_estcol(
            q = self.yystack[-1].minor,
            )
    def action_104(self):
        # query ::= estpairrow
        return self.delegate.p_query_estpairrow(
            q = self.yystack[-1].minor,
            )
    def action_105(self):
        # query ::= estpaircol
        return self.delegate.p_query_estpaircol(
            q = self.yystack[-1].minor,
            )
    def action_106(self):
        # query ::= infer
        return self.delegate.p_query_infer(
            q = self.yystack[-1].minor,
            )
    def action_107(self):
        # query ::= simulate
        return self.delegate.p_query_simulate(
            q = self.yystack[-1].minor,
            )
    def action_108(self):
        # select ::= K_SELECT select_quant select_columns from_sel_opt where group_by order_by limit_opt
        return self.delegate.p_select_s(
            quant = self.yystack[-7].minor,
            cols = self.yystack[-6].minor,
            tabs = self.yystack[-5].minor,
            cond = self.yystack[-4].minor,
            grouping = self.yystack[-3].minor,
            ord = self.yystack[-2].minor,
            lim = self.yystack[-1].minor,
            )
    def action_109(self):
        # estimate ::= K_ESTIMATE select_quant select_columns from_est modeledby_opt usingmodel_opt where group_by order_by limit_opt
        return self.delegate.p_estimate_e(
            quant = self.yystack[-9].minor,
            cols = self.yystack[-8].minor,
            tabs = self.yystack[-7].minor,
            generator = self.yystack[-6].minor,
            modelnos = self.yystack[-5].minor,
            cond = self.yystack[-4].minor,
            grouping = self.yystack[-3].minor,
            ord = self.yystack[-2].minor,
            lim = self.yystack[-1].minor,
            )
    def action_110(self):
        # estcol ::= K_ESTIMATE K_COLUMNS error T_SEMI
        return self.delegate.p_estcol_e(
            )
    def action_111(self):
        # estpairrow ::= K_ESTIMATE K_PAIRWISE K_ROW error T_SEMI
        return self.delegate.p_estpairrow_e(
            )
    def action_112(self):
        # estpaircol ::= K_ESTIMATE K_PAIRWISE error T_SEMI
        return self.delegate.p_estpaircol_e(
            )
    def action_113(self):
        # estby ::= K_ESTIMATE select_quant select_columns K_BY|K_WITHIN population_name modeledby_opt usingmodel_opt
        return self.delegate.p_estby_e(
            quant = self.yystack[-6].minor,
            cols = self.yystack[-5].minor,
            population = self.yystack[-3].minor,
            generator = self.yystack[-2].minor,
            modelnos = self.yystack[-1].minor,
            )
    def action_114(self):
        # infer ::= K_INFER infer_auto_columns withconf_opt nsamples_opt K_FROM population_name modeledby_opt usingmodel_opt where group_by order_by limit_opt
        return self.delegate.p_infer_auto(
            cols = self.yystack[-11].minor,
            conf = self.yystack[-10].minor,
            nsamp = self.yystack[-9].minor,
            population = self.yystack[-7].minor,
            generator = self.yystack[-6].minor,
            modelnos = self.yystack[-5].minor,
            cond = self.yystack[-4].minor,
            grouping = self.yystack[-3].minor,
            ord = self.yystack[-2].minor,
            lim = self.yystack[-1].minor,
            )
    def action_115(self):
        # infer ::= K_INFER K_EXPLICIT infer_exp_columns K_FROM population_name modeledby_opt usingmodel_opt where group_by order_by limit_opt
        return self.delegate.p_infer_explicit(
            cols = self.yystack[-9].minor,
            population = self.yystack[-7].minor,
            generator = self.yystack[-6].minor,
            modelnos = self.yystack[-5].minor,
            cond = self.yystack[-4].minor,
            grouping = self.yystack[-3].minor,
            ord = self.yystack[-2].minor,
            lim = self.yystack[-1].minor,
            )
    def action_116(self):
        # infer_auto_columns ::= infer_auto_column
        return self.delegate.p_infer_auto_columns_one(
            c = self.yystack[-1].minor,
            )
    def action_117(self):
        # infer_auto_columns ::= infer_auto_columns T_COMMA infer_auto_column
        return self.delegate.p_infer_auto_columns_many(
            cs = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_118(self):
        # infer_auto_column ::= T_STAR
        return self.delegate.p_infer_auto_column_all(
            )
    def action_119(self):
        # infer_auto_column ::= column_name as
        return self.delegate.p_infer_auto_column_one(
            col = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_120(self):
        # withconf_opt ::=
        return self.delegate.p_withconf_opt_none(
            )
    def action_121(self):
        # withconf_opt ::= withconf
        return self.delegate.p_withconf_opt_some(
            conf = self.yystack[-1].minor,
            )
    def action_122(self):
        # withconf ::= K_WITH K_CONFIDENCE primary
        return self.delegate.p_withconf_conf(
            conf = self.yystack[-1].minor,
            )
    def action_123(self):
        # infer_exp_columns ::= infer_exp_column
        return self.delegate.p_infer_exp_columns_one(
            c = self.yystack[-1].minor,
            )
    def action_124(self):
        # infer_exp_columns ::= infer_exp_columns T_COMMA infer_exp_column
        return self.delegate.p_infer_exp_columns_many(
            cs = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_125(self):
        # infer_exp_column ::= select_column
        return self.delegate.p_infer_exp_column_sel(
            c = self.yystack[-1].minor,
            )
    def action_126(self):
        # infer_exp_column ::= K_PREDICT column_name as conf_opt nsamples_opt
        return self.delegate.p_infer_exp_column_pred(
            col = self.yystack[-4].minor,
            name = self.yystack[-3].minor,
            confname = self.yystack[-2].minor,
            nsamp = self.yystack[-1].minor,
            )
    def action_127(self):
        # conf_opt ::=
        return self.delegate.p_conf_opt_none(
            )
    def action_128(self):
        # conf_opt ::= K_CONFIDENCE column_name
        return self.delegate.p_conf_opt_some(
            confname = self.yystack[-1].minor,
            )
    def action_129(self):
        # simulate ::= K_SIMULATE select_columns K_FROM population_name modeledby_opt usingmodel_opt given_opt limit accuracy_opt
        return self.delegate.p_simulate_s(
            cols = self.yystack[-8].minor,
            population = self.yystack[-6].minor,
            generator = self.yystack[-5].minor,
            modelnos = self.yystack[-4].minor,
            constraints = self.yystack[-3].minor,
            lim = self.yystack[-2].minor,
            acc = self.yystack[-1].minor,
            )
    def action_130(self):
        # simulate ::= K_SIMULATE select_columns K_FROM population_name modeledby_opt usingmodel_opt given_opt
        return self.delegate.p_simulate_nolimit(
            cols = self.yystack[-6].minor,
            population = self.yystack[-4].minor,
            generator = self.yystack[-3].minor,
            modelnos = self.yystack[-2].minor,
            constraints = self.yystack[-1].minor,
            )
    def action_131(self):
        # given_opt ::=
        return self.delegate.p_given_opt_none(
            )
    def action_132(self):
        # given_opt ::= K_GIVEN constraints
        return self.delegate.p_given_opt_some(
            constraints = self.yystack[-1].minor,
            )
    def action_133(self):
        # constraints ::= constraint
        return self.delegate.p_constraints_one(
            c = self.yystack[-1].minor,
            )
    def action_134(self):
        # constraints ::= constraints T_COMMA constraint
        return self.delegate.p_constraints_many(
            cs = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_135(self):
        # constraint ::= column_name T_EQ expression
        return self.delegate.p_constraint_c(
            col = self.yystack[-3].minor,
            value = self.yystack[-1].minor,
            )
    def action_136(self):
        # constraints_opt ::=
        return self.delegate.p_constraints_opt_none(
            )
    def action_137(self):
        # constraints_opt ::= constraints
        return self.delegate.p_constraints_opt_some(
            cs = self.yystack[-1].minor,
            )
    def action_138(self):
        # constraints_list ::= T_LROUND constraints T_RROUND
        return self.delegate.p_constraints_list_one(
            cs = self.yystack[-2].minor,
            )
    def action_139(self):
        # constraints_list ::= constraints_list T_COMMA T_LROUND constraints T_RROUND
        return self.delegate.p_constraints_list_some(
            css = self.yystack[-5].minor,
            cs = self.yystack[-2].minor,
            )
    def action_140(self):
        # simulate ::= K_SIMULATE select_columns K_FROM K_MODELS K_OF population_name modeledby_opt
        return self.delegate.p_simulate_models(
            cols = self.yystack[-6].minor,
            population = self.yystack[-2].minor,
            generator = self.yystack[-1].minor,
            )
    def action_141(self):
        # select_quant ::= K_DISTINCT
        return self.delegate.p_select_quant_distinct(
            )
    def action_142(self):
        # select_quant ::= K_ALL
        return self.delegate.p_select_quant_all(
            )
    def action_143(self):
        # select_quant ::=
        return self.delegate.p_select_quant_default(
            )
    def action_144(self):
        # select_columns ::= select_column
        return self.delegate.p_select_columns_one(
            c = self.yystack[-1].minor,
            )
    def action_145(self):
        # select_columns ::= select_columns T_COMMA select_column
        return self.delegate.p_select_columns_many(
            cs = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_146(self):
        # select_column ::= T_STAR
        return self.delegate.p_select_column_star(
            )
    def action_147(self):
        # select_column ::= table_name T_DOT T_STAR
        return self.delegate.p_select_column_qstar(
            table = self.yystack[-3].minor,
            )
    def action_148(self):
        # select_column ::= table_name T_DOT T_LROUND query T_RROUND
        return self.delegate.p_select_column_qsub(
            table = self.yystack[-5].minor,
            q = self.yystack[-2].minor,
            )
    def action_149(self):
        # select_column ::= expression as
        return self.delegate.p_select_column_exp(
            e = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_150(self):
        # as ::=
        return self.delegate.p_as_none(
            )
    def action_151(self):
        # as ::= K_AS L_NAME
        return self.delegate.p_as_some(
            name = self.yystack[-1].minor,
            )
    def action_152(self):
        # from_sel_opt ::=
        return self.delegate.p_from_sel_opt_empty(
            )
    def action_153(self):
        # from_sel_opt ::= K_FROM select_tables
        return self.delegate.p_from_sel_opt_nonempty(
            tables = self.yystack[-1].minor,
            )
    def action_154(self):
        # from_est ::= K_FROM population_name
        return self.delegate.p_from_est_row(
            name = self.yystack[-1].minor,
            )
    def action_155(self):
        # from_est ::= K_FROM K_PAIRWISE population_name
        return self.delegate.p_from_est_pairrow(
            name = self.yystack[-1].minor,
            )
    def action_156(self):
        # from_est ::= K_FROM K_COLUMNS|K_VARIABLES K_OF population_name
        return self.delegate.p_from_est_col(
            name = self.yystack[-1].minor,
            )
    def action_157(self):
        # from_est ::= K_FROM K_PAIRWISE K_COLUMNS|K_VARIABLES K_OF population_name for
        return self.delegate.p_from_est_paircol(
            name = self.yystack[-2].minor,
            subcols = self.yystack[-1].minor,
            )
    def action_158(self):
        # modeledby_opt ::=
        return self.delegate.p_modeledby_opt_none(
            )
    def action_159(self):
        # modeledby_opt ::= K_MODELED|K_MODELLED K_BY generator_name
        return self.delegate.p_modeledby_opt_some(
            gen = self.yystack[-1].minor,
            )
    def action_160(self):
        # usingmodel_opt ::=
        return self.delegate.p_usingmodel_opt_none(
            )
    def action_161(self):
        # usingmodel_opt ::= K_USING model_token modelset
        return self.delegate.p_usingmodel_opt_some(
            modelnos = self.yystack[-1].minor,
            )
    def action_162(self):
        # select_tables ::= select_table
        return self.delegate.p_select_tables_one(
            t = self.yystack[-1].minor,
            )
    def action_163(self):
        # select_tables ::= select_tables T_COMMA select_table
        return self.delegate.p_select_tables_many(
            ts = self.yystack[-3].minor,
            t = self.yystack[-1].minor,
            )
    def action_164(self):
        # select_table ::= table_name as
        return self.delegate.p_select_table_named(
            table = self.yystack[-2].minor,
            name = self.yystack[-1].minor,
            )
    def action_165(self):
        # select_table ::= T_LROUND query T_RROUND as
        return self.delegate.p_select_table_subquery(
            q = self.yystack[-3].minor,
            name = self.yystack[-1].minor,
            )
    def action_166(self):
        # for ::=
        return self.delegate.p_for_none(
            )
    def action_167(self):
        # for ::= K_FOR column_lists
        return self.delegate.p_for_one(
            collist = self.yystack[-1].minor,
            )
    def action_168(self):
        # where ::=
        return self.delegate.p_where_unconditional(
            )
    def action_169(self):
        # where ::= K_WHERE expression
        return self.delegate.p_where_conditional(
            condition = self.yystack[-1].minor,
            )
    def action_170(self):
        # column_name ::= L_NAME
        return self.delegate.p_column_name_cn(
            name = self.yystack[-1].minor,
            )
    def action_171(self):
        # generator_name ::= L_NAME
        return self.delegate.p_generator_name_unqualified(
            name = self.yystack[-1].minor,
            )
    def action_172(self):
        # backend_name ::= L_NAME
        return self.delegate.p_backend_name_bn(
            name = self.yystack[-1].minor,
            )
    def action_173(self):
        # population_name ::= L_NAME
        return self.delegate.p_population_name_pn(
            name = self.yystack[-1].minor,
            )
    def action_174(self):
        # table_name ::= L_NAME
        return self.delegate.p_table_name_unqualified(
            name = self.yystack[-1].minor,
            )
    def action_175(self):
        # model_token ::= K_MODEL
        return None
    def action_176(self):
        # model_token ::= K_MODELS
        return None
    def action_177(self):
        # group_by ::=
        return self.delegate.p_group_by_none(
            )
    def action_178(self):
        # group_by ::= K_GROUP K_BY expressions
        return self.delegate.p_group_by_some(
            keys = self.yystack[-1].minor,
            )
    def action_179(self):
        # group_by ::= K_GROUP K_BY expressions K_HAVING expression
        return self.delegate.p_group_by_having(
            keys = self.yystack[-3].minor,
            cond = self.yystack[-1].minor,
            )
    def action_180(self):
        # order_by ::=
        return self.delegate.p_order_by_none(
            )
    def action_181(self):
        # order_by ::= K_ORDER K_BY order_keys
        return self.delegate.p_order_by_some(
            keys = self.yystack[-1].minor,
            )
    def action_182(self):
        # order_keys ::= order_key
        return self.delegate.p_order_keys_one(
            key = self.yystack[-1].minor,
            )
    def action_183(self):
        # order_keys ::= order_keys T_COMMA order_key
        return self.delegate.p_order_keys_many(
            keys = self.yystack[-3].minor,
            key = self.yystack[-1].minor,
            )
    def action_184(self):
        # order_key ::= expression order_sense
        return self.delegate.p_order_key_k(
            e = self.yystack[-2].minor,
            s = self.yystack[-1].minor,
            )
    def action_185(self):
        # order_sense ::=
        return self.delegate.p_order_sense_none(
            )
    def action_186(self):
        # order_sense ::= K_ASC
        return self.delegate.p_order_sense_asc(
            )
    def action_187(self):
        # order_sense ::= K_DESC
        return self.delegate.p_order_sense_desc(
            )
    def action_188(self):
        # accuracy_opt ::=
        return self.delegate.p_accuracy_opt_none(
            )
    def action_189(self):
        # accuracy_opt ::= K_ACCURACY L_INTEGER
        return self.delegate.p_accuracy_opt_some(
            acc = self.yystack[-1].minor,
            )
    def action_190(self):
        # limit_opt ::=
        return self.delegate.p_limit_opt_none(
            )
    def action_191(self):
        # limit_opt ::= limit
        return self.delegate.p_limit_opt_some(
            lim = self.yystack[-1].minor,
            )
    def action_192(self):
        # limit ::= K_LIMIT expression
        return self.delegate.p_limit_n(
            limit = self.yystack[-1].minor,
            )
    def action_193(self):
        # limit ::= K_LIMIT expression K_OFFSET expression
        return self.delegate.p_limit_offset(
            limit = self.yystack[-3].minor,
            offset = self.yystack[-1].minor,
            )
    def action_194(self):
        # limit ::= K_LIMIT expression T_COMMA expression
        return self.delegate.p_limit_comma(
            offset = self.yystack[-3].minor,
            limit = self.yystack[-1].minor,
            )
    def action_195(self):
        # expressions_opt ::=
        return self.delegate.p_expressions_opt_none(
            )
    def action_196(self):
        # expressions_opt ::= expressions
        return self.delegate.p_expressions_opt_some(
            es = self.yystack[-1].minor,
            )
    def action_197(self):
        # expressions ::= expression
        return self.delegate.p_expressions_one(
            e = self.yystack[-1].minor,
            )
    def action_198(self):
        # expressions ::= expressions T_COMMA expression
        return self.delegate.p_expressions_many(
            es = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_199(self):
        # expression ::= boolean_or
        return self.delegate.p_expression_top(
            e = self.yystack[-1].minor,
            )
    def action_200(self):
        # boolean_or ::= boolean_or K_OR boolean_and
        return self.delegate.p_boolean_or_or(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_201(self):
        # boolean_or ::= boolean_and
        return self.delegate.p_boolean_or_and(
            a = self.yystack[-1].minor,
            )
    def action_202(self):
        # boolean_and ::= boolean_and K_AND boolean_not
        return self.delegate.p_boolean_and_and(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_203(self):
        # boolean_and ::= boolean_not
        return self.delegate.p_boolean_and_not(
            n = self.yystack[-1].minor,
            )
    def action_204(self):
        # boolean_not ::= K_NOT boolean_not
        return self.delegate.p_boolean_not_not(
            n = self.yystack[-1].minor,
            )
    def action_205(self):
        # boolean_not ::= equality
        return self.delegate.p_boolean_not_equality(
            c = self.yystack[-1].minor,
            )
    def action_206(self):
        # equality ::= equality K_IS ordering
        return self.delegate.p_equality_is(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_207(self):
        # equality ::= equality K_IS K_NOT ordering
        return self.delegate.p_equality_isnot(
            l = self.yystack[-4].minor,
            r = self.yystack[-1].minor,
            )
    def action_208(self):
        # equality ::= equality K_LIKE ordering
        return self.delegate.p_equality_like(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_209(self):
        # equality ::= equality K_NOT K_LIKE ordering
        return self.delegate.p_equality_notlike(
            l = self.yystack[-4].minor,
            r = self.yystack[-1].minor,
            )
    def action_210(self):
        # equality ::= equality K_LIKE ordering K_ESCAPE ordering
        return self.delegate.p_equality_like_esc(
            l = self.yystack[-5].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_211(self):
        # equality ::= equality K_NOT K_LIKE ordering K_ESCAPE ordering
        return self.delegate.p_equality_notlike_esc(
            l = self.yystack[-6].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_212(self):
        # equality ::= equality K_GLOB ordering
        return self.delegate.p_equality_glob(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_213(self):
        # equality ::= equality K_NOT K_GLOB ordering
        return self.delegate.p_equality_notglob(
            l = self.yystack[-4].minor,
            r = self.yystack[-1].minor,
            )
    def action_214(self):
        # equality ::= equality K_GLOB ordering K_ESCAPE ordering
        return self.delegate.p_equality_glob_esc(
            l = self.yystack[-5].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_215(self):
        # equality ::= equality K_NOT K_GLOB ordering K_ESCAPE ordering
        return self.delegate.p_equality_notglob_esc(
            l = self.yystack[-6].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_216(self):
        # equality ::= equality K_REGEXP ordering
        return self.delegate.p_equality_regexp(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_217(self):
        # equality ::= equality K_NOT K_REGEXP ordering
        return self.delegate.p_equality_notregexp(
            l = self.yystack[-4].minor,
            r = self.yystack[-1].minor,
            )
    def action_218(self):
        # equality ::= equality K_REGEXP ordering K_ESCAPE ordering
        return self.delegate.p_equality_regexp_esc(
            l = self.yystack[-5].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_219(self):
        # equality ::= equality K_NOT K_REGEXP ordering K_ESCAPE ordering
        return self.delegate.p_equality_notregexp_esc(
            l = self.yystack[-6].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_220(self):
        # equality ::= equality K_MATCH ordering
        return self.delegate.p_equality_match(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_221(self):
        # equality ::= equality K_NOT K_MATCH ordering
        return self.delegate.p_equality_notmatch(
            l = self.yystack[-4].minor,
            r = self.yystack[-1].minor,
            )
    def action_222(self):
        # equality ::= equality K_MATCH ordering K_ESCAPE ordering
        return self.delegate.p_equality_match_esc(
            l = self.yystack[-5].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_223(self):
        # equality ::= equality K_NOT K_MATCH ordering K_ESCAPE ordering
        return self.delegate.p_equality_notmatch_esc(
            l = self.yystack[-6].minor,
            r = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_224(self):
        # equality ::= equality K_BETWEEN ordering K_AND ordering
        return self.delegate.p_equality_between(
            m = self.yystack[-5].minor,
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_225(self):
        # equality ::= equality K_NOT K_BETWEEN ordering K_AND ordering
        return self.delegate.p_equality_notbetween(
            m = self.yystack[-6].minor,
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_226(self):
        # equality ::= equality K_IN T_LROUND query T_RROUND
        return self.delegate.p_equality_in_query(
            e = self.yystack[-5].minor,
            q = self.yystack[-2].minor,
            )
    def action_227(self):
        # equality ::= equality K_NOT K_IN T_LROUND query T_RROUND
        return self.delegate.p_equality_notin_query(
            e = self.yystack[-6].minor,
            q = self.yystack[-2].minor,
            )
    def action_228(self):
        # equality ::= equality K_IN T_LROUND expressions_opt T_RROUND
        return self.delegate.p_equality_in_exp(
            e = self.yystack[-5].minor,
            es = self.yystack[-2].minor,
            )
    def action_229(self):
        # equality ::= equality K_NOT K_IN T_LROUND expressions_opt T_RROUND
        return self.delegate.p_equality_notin_exp(
            e = self.yystack[-6].minor,
            es = self.yystack[-2].minor,
            )
    def action_230(self):
        # equality ::= equality K_ISNULL
        return self.delegate.p_equality_isnull(
            e = self.yystack[-2].minor,
            )
    def action_231(self):
        # equality ::= equality K_NOTNULL
        return self.delegate.p_equality_notnull(
            e = self.yystack[-2].minor,
            )
    def action_232(self):
        # equality ::= equality T_NEQ ordering
        return self.delegate.p_equality_neq(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_233(self):
        # equality ::= equality T_EQ ordering
        return self.delegate.p_equality_eq(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_234(self):
        # equality ::= ordering
        return self.delegate.p_equality_ordering(
            o = self.yystack[-1].minor,
            )
    def action_235(self):
        # ordering ::= ordering T_LT bitwise
        return self.delegate.p_ordering_lt(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_236(self):
        # ordering ::= ordering T_LEQ bitwise
        return self.delegate.p_ordering_leq(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_237(self):
        # ordering ::= ordering T_GEQ bitwise
        return self.delegate.p_ordering_geq(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_238(self):
        # ordering ::= ordering T_GT bitwise
        return self.delegate.p_ordering_gt(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_239(self):
        # ordering ::= bitwise
        return self.delegate.p_ordering_bitwise(
            b = self.yystack[-1].minor,
            )
    def action_240(self):
        # bitwise ::= bitwise T_BITAND additive
        return self.delegate.p_bitwise_and(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_241(self):
        # bitwise ::= bitwise T_BITIOR additive
        return self.delegate.p_bitwise_ior(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_242(self):
        # bitwise ::= bitwise T_LSHIFT additive
        return self.delegate.p_bitwise_lshift(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_243(self):
        # bitwise ::= bitwise T_RSHIFT additive
        return self.delegate.p_bitwise_rshift(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_244(self):
        # bitwise ::= additive
        return self.delegate.p_bitwise_additive(
            a = self.yystack[-1].minor,
            )
    def action_245(self):
        # additive ::= additive T_PLUS multiplicative
        return self.delegate.p_additive_add(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_246(self):
        # additive ::= additive T_MINUS multiplicative
        return self.delegate.p_additive_sub(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_247(self):
        # additive ::= multiplicative
        return self.delegate.p_additive_mult(
            m = self.yystack[-1].minor,
            )
    def action_248(self):
        # multiplicative ::= multiplicative T_STAR concatenative
        return self.delegate.p_multiplicative_mul(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_249(self):
        # multiplicative ::= multiplicative T_SLASH concatenative
        return self.delegate.p_multiplicative_div(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_250(self):
        # multiplicative ::= multiplicative T_PERCENT concatenative
        return self.delegate.p_multiplicative_rem(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_251(self):
        # multiplicative ::= concatenative
        return self.delegate.p_multiplicative_conc(
            c = self.yystack[-1].minor,
            )
    def action_252(self):
        # concatenative ::= concatenative T_CONCAT collating
        return self.delegate.p_concatenative_concat(
            l = self.yystack[-3].minor,
            r = self.yystack[-1].minor,
            )
    def action_253(self):
        # concatenative ::= collating
        return self.delegate.p_concatenative_collate(
            c = self.yystack[-1].minor,
            )
    def action_254(self):
        # collating ::= collating K_COLLATE L_NAME|L_STRING
        return self.delegate.p_collating_collate(
            e = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_255(self):
        # collating ::= unary
        return self.delegate.p_collating_unary(
            u = self.yystack[-1].minor,
            )
    def action_256(self):
        # unary ::= T_BITNOT unary
        return self.delegate.p_unary_bitwise_not(
            u = self.yystack[-1].minor,
            )
    def action_257(self):
        # unary ::= T_MINUS unary
        return self.delegate.p_unary_minus(
            u = self.yystack[-1].minor,
            )
    def action_258(self):
        # unary ::= T_PLUS unary
        return self.delegate.p_unary_plus(
            u = self.yystack[-1].minor,
            )
    def action_259(self):
        # unary ::= bqlfn
        return self.delegate.p_unary_bql(
            b = self.yystack[-1].minor,
            )
    def action_260(self):
        # bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF column_list
        return self.delegate.p_bqlfn_predprob_row(
            target = self.yystack[-1].minor,
            )
    def action_261(self):
        # bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF T_LROUND column_lists T_RROUND
        return self.delegate.p_bqlfn_jpredprob_row(
            targets = self.yystack[-2].minor,
            )
    def action_262(self):
        # bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF column_list K_GIVEN T_LROUND column_lists T_RROUND
        return self.delegate.p_bqlfn_condpredprob_row(
            target = self.yystack[-5].minor,
            constraints = self.yystack[-2].minor,
            )
    def action_263(self):
        # bqlfn ::= K_PREDICTIVE K_PROBABILITY K_OF T_LROUND column_lists T_RROUND K_GIVEN T_LROUND column_lists T_RROUND
        return self.delegate.p_bqlfn_condjpredprob_row(
            targets = self.yystack[-6].minor,
            constraints = self.yystack[-2].minor,
            )
    def action_264(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF column_name T_EQ unary
        return self.delegate.p_bqlfn_prob_const(
            col = self.yystack[-3].minor,
            e = self.yystack[-1].minor,
            )
    def action_265(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF T_LROUND constraints_opt T_RROUND
        return self.delegate.p_bqlfn_jprob_const(
            targets = self.yystack[-2].minor,
            )
    def action_266(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF column_name T_EQ primary K_GIVEN T_LROUND constraints_opt T_RROUND
        return self.delegate.p_bqlfn_condprob_const(
            col = self.yystack[-7].minor,
            e = self.yystack[-5].minor,
            constraints = self.yystack[-2].minor,
            )
    def action_267(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF T_LROUND constraints_opt T_RROUND K_GIVEN T_LROUND constraints_opt T_RROUND
        return self.delegate.p_bqlfn_condjprob_const(
            targets = self.yystack[-6].minor,
            constraints = self.yystack[-2].minor,
            )
    def action_268(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF K_VALUE unary
        return self.delegate.p_bqlfn_prob_1col(
            e = self.yystack[-1].minor,
            )
    def action_269(self):
        # bqlfn ::= K_PROBABILITY K_DENSITY K_OF K_VALUE primary K_GIVEN T_LROUND constraints_opt T_RROUND
        return self.delegate.p_bqlfn_condprob_1col(
            e = self.yystack[-5].minor,
            constraints = self.yystack[-2].minor,
            )
    def action_270(self):
        # bqlfn ::= K_SIMILARITY K_OF T_LROUND expression T_RROUND K_TO T_LROUND expression T_RROUND wrt
        return self.delegate.p_bqlfn_sim_const(
            cond0 = self.yystack[-7].minor,
            cond1 = self.yystack[-3].minor,
            col = self.yystack[-1].minor,
            )
    def action_271(self):
        # bqlfn ::= K_SIMILARITY K_TO T_LROUND expression T_RROUND wrt
        return self.delegate.p_bqlfn_sim_1row(
            cond = self.yystack[-3].minor,
            col = self.yystack[-1].minor,
            )
    def action_272(self):
        # bqlfn ::= K_SIMILARITY wrt
        return self.delegate.p_bqlfn_sim_2row(
            col = self.yystack[-1].minor,
            )
    def action_273(self):
        # bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO existing_rows wrt
        return self.delegate.p_bqlfn_predrel_existing(
            cond0 = self.yystack[-4].minor,
            cond1 = self.yystack[-2].minor,
            col = self.yystack[-1].minor,
            )
    def action_274(self):
        # bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO hypothetical_rows wrt
        return self.delegate.p_bqlfn_predrel_hypothetical(
            cond0 = self.yystack[-4].minor,
            constraints = self.yystack[-2].minor,
            col = self.yystack[-1].minor,
            )
    def action_275(self):
        # bqlfn ::= K_PREDICTIVE K_RELEVANCE predrel_of_opt K_TO existing_rows K_AND hypothetical_rows wrt
        return self.delegate.p_bqlfn_predrel_both(
            cond0 = self.yystack[-6].minor,
            cond1 = self.yystack[-4].minor,
            constraints = self.yystack[-2].minor,
            col = self.yystack[-1].minor,
            )
    def action_276(self):
        # bqlfn ::= K_DEPENDENCE K_PROBABILITY ofwith
        return self.delegate.p_bqlfn_depprob(
            cols = self.yystack[-1].minor,
            )
    def action_277(self):
        # bqlfn ::= K_MUTUAL K_INFORMATION ofwithmulti mi_given_opt nsamples_opt
        return self.delegate.p_bqlfn_mutinf(
            cols = self.yystack[-3].minor,
            constraints = self.yystack[-2].minor,
            nsamp = self.yystack[-1].minor,
            )
    def action_278(self):
        # bqlfn ::= K_PROBABILITY K_OF T_LROUND expression T_RROUND
        return self.delegate.p_bqlfn_prob_est(
            e = self.yystack[-2].minor,
            )
    def action_279(self):
        # predrel_of_opt ::=
        return self.delegate.p_predrel_of_opt_none(
            )
    def action_280(self):
        # predrel_of_opt ::= K_OF T_LROUND expression T_RROUND
        return self.delegate.p_predrel_of_opt_one(
            cond0 = self.yystack[-2].minor,
            )
    def action_281(self):
        # existing_rows ::= K_EXISTING K_ROWS T_LROUND expression T_RROUND
        return self.delegate.p_existing_rows_one(
            cond = self.yystack[-2].minor,
            )
    def action_282(self):
        # hypothetical_rows ::= K_HYPOTHETICAL K_ROWS K_WITH K_VALUES T_LROUND constraints_list T_RROUND
        return self.delegate.p_hypothetical_rows_one(
            cs = self.yystack[-2].minor,
            )
    def action_283(self):
        # ofwithmulti ::=
        return self.delegate.p_ofwithmulti_bql_2col(
            )
    def action_284(self):
        # ofwithmulti ::= K_WITH mi_columns
        return self.delegate.p_ofwithmulti_bql_1col(
            cols = self.yystack[-1].minor,
            )
    def action_285(self):
        # ofwithmulti ::= K_OF mi_columns K_WITH mi_columns
        return self.delegate.p_ofwithmulti_bql_const(
            cols0 = self.yystack[-3].minor,
            cols1 = self.yystack[-1].minor,
            )
    def action_286(self):
        # mi_columns ::= column_name
        return self.delegate.p_mi_columns_one(
            col = self.yystack[-1].minor,
            )
    def action_287(self):
        # mi_columns ::= T_LROUND mi_column_list T_RROUND
        return self.delegate.p_mi_columns_many(
            cols = self.yystack[-2].minor,
            )
    def action_288(self):
        # mi_column_list ::= column_name
        return self.delegate.p_mi_column_list_one(
            col = self.yystack[-1].minor,
            )
    def action_289(self):
        # mi_column_list ::= mi_column_list T_COMMA column_name
        return self.delegate.p_mi_column_list_many(
            cols = self.yystack[-3].minor,
            col = self.yystack[-1].minor,
            )
    def action_290(self):
        # mi_given_opt ::=
        return self.delegate.p_mi_given_opt_none(
            )
    def action_291(self):
        # mi_given_opt ::= K_GIVEN T_LROUND mi_constraints T_RROUND
        return self.delegate.p_mi_given_opt_some(
            constraints = self.yystack[-2].minor,
            )
    def action_292(self):
        # mi_constraints ::= mi_constraint
        return self.delegate.p_mi_constraints_one(
            c = self.yystack[-1].minor,
            )
    def action_293(self):
        # mi_constraints ::= mi_constraints T_COMMA mi_constraint
        return self.delegate.p_mi_constraints_many(
            cs = self.yystack[-3].minor,
            c = self.yystack[-1].minor,
            )
    def action_294(self):
        # mi_constraint ::= column_name T_EQ expression
        return self.delegate.p_mi_constraint_equality(
            col = self.yystack[-3].minor,
            value = self.yystack[-1].minor,
            )
    def action_295(self):
        # mi_constraint ::= column_name
        return self.delegate.p_mi_constraint_marginal(
            col = self.yystack[-1].minor,
            )
    def action_296(self):
        # bqlfn ::= K_CORRELATION ofwith
        return self.delegate.p_bqlfn_correl(
            cols = self.yystack[-1].minor,
            )
    def action_297(self):
        # bqlfn ::= K_CORRELATION K_PVALUE ofwith
        return self.delegate.p_bqlfn_correl_pval(
            cols = self.yystack[-1].minor,
            )
    def action_298(self):
        # bqlfn ::= K_PREDICT column_name withconf nsamples_opt
        return self.delegate.p_bqlfn_predict(
            col = self.yystack[-3].minor,
            conf = self.yystack[-2].minor,
            nsamp = self.yystack[-1].minor,
            )
    def action_299(self):
        # bqlfn ::= primary
        return self.delegate.p_bqlfn_primary(
            p = self.yystack[-1].minor,
            )
    def action_300(self):
        # wrt ::= K_IN K_THE K_CONTEXT K_OF column_list
        return self.delegate.p_wrt_one(
            col = self.yystack[-1].minor,
            )
    def action_301(self):
        # ofwith ::=
        return self.delegate.p_ofwith_bql_2col(
            )
    def action_302(self):
        # ofwith ::= K_WITH column_name
        return self.delegate.p_ofwith_bql_1col(
            col = self.yystack[-1].minor,
            )
    def action_303(self):
        # ofwith ::= K_OF column_name K_WITH column_name
        return self.delegate.p_ofwith_bql_const(
            col1 = self.yystack[-3].minor,
            col2 = self.yystack[-1].minor,
            )
    def action_304(self):
        # nsamples_opt ::=
        return self.delegate.p_nsamples_opt_none(
            )
    def action_305(self):
        # nsamples_opt ::= K_USING primary K_SAMPLES
        return self.delegate.p_nsamples_opt_some(
            nsamples = self.yystack[-2].minor,
            )
    def action_306(self):
        # column_lists ::= column_list
        return self.delegate.p_column_lists_one(
            collist = self.yystack[-1].minor,
            )
    def action_307(self):
        # column_lists ::= column_lists T_COMMA|K_AND column_list
        return self.delegate.p_column_lists_many(
            collists = self.yystack[-3].minor,
            collist = self.yystack[-1].minor,
            )
    def action_308(self):
        # column_list ::= T_STAR
        return self.delegate.p_column_list_all(
            )
    def action_309(self):
        # column_list ::= column_name
        return self.delegate.p_column_list_column(
            col = self.yystack[-1].minor,
            )
    def action_310(self):
        # column_list ::= T_LROUND query T_RROUND
        return self.delegate.p_column_list_subquery(
            q = self.yystack[-2].minor,
            )
    def action_311(self):
        # primary ::= literal
        return self.delegate.p_primary_literal(
            v = self.yystack[-1].minor,
            )
    def action_312(self):
        # primary ::= L_NUMPAR
        return self.delegate.p_primary_numpar(
            n = self.yystack[-1].minor,
            )
    def action_313(self):
        # primary ::= L_NAMPAR
        return self.delegate.p_primary_nampar(
            n = self.yystack[-1].minor,
            )
    def action_314(self):
        # primary ::= L_NAME T_LROUND expressions_opt T_RROUND
        return self.delegate.p_primary_apply(
            fn = self.yystack[-4].minor,
            es = self.yystack[-2].minor,
            )
    def action_315(self):
        # primary ::= L_NAME T_LROUND K_DISTINCT expressions_opt T_RROUND
        return self.delegate.p_primary_apply_distinct(
            fn = self.yystack[-5].minor,
            es = self.yystack[-2].minor,
            )
    def action_316(self):
        # primary ::= L_NAME T_LROUND T_STAR T_RROUND
        return self.delegate.p_primary_apply_star(
            fn = self.yystack[-4].minor,
            )
    def action_317(self):
        # primary ::= T_LROUND expression T_RROUND
        return self.delegate.p_primary_paren(
            e = self.yystack[-2].minor,
            )
    def action_318(self):
        # primary ::= T_LROUND query T_RROUND
        return self.delegate.p_primary_subquery(
            q = self.yystack[-2].minor,
            )
    def action_319(self):
        # primary ::= K_CAST T_LROUND expression K_AS type T_RROUND
        return self.delegate.p_primary_cast(
            e = self.yystack[-4].minor,
            t = self.yystack[-2].minor,
            )
    def action_320(self):
        # primary ::= K_EXISTS T_LROUND query T_RROUND
        return self.delegate.p_primary_exists(
            q = self.yystack[-2].minor,
            )
    def action_321(self):
        # primary ::= column_name
        return self.delegate.p_primary_column(
            col = self.yystack[-1].minor,
            )
    def action_322(self):
        # primary ::= table_name T_DOT column_name
        return self.delegate.p_primary_tabcol(
            tab = self.yystack[-3].minor,
            col = self.yystack[-1].minor,
            )
    def action_323(self):
        # primary ::= K_CASE case_key_opt case_whens_opt case_else_opt K_END
        return self.delegate.p_primary_case(
            k = self.yystack[-4].minor,
            ws = self.yystack[-3].minor,
            e = self.yystack[-2].minor,
            )
    def action_324(self):
        # case_key_opt ::=
        return self.delegate.p_case_key_opt_none(
            )
    def action_325(self):
        # case_key_opt ::= expression
        return self.delegate.p_case_key_opt_some(
            k = self.yystack[-1].minor,
            )
    def action_326(self):
        # case_whens_opt ::=
        return self.delegate.p_case_whens_opt_none(
            )
    def action_327(self):
        # case_whens_opt ::= case_whens_opt K_WHEN expression K_THEN expression
        return self.delegate.p_case_whens_opt_some(
            ws = self.yystack[-5].minor,
            w = self.yystack[-3].minor,
            t = self.yystack[-1].minor,
            )
    def action_328(self):
        # case_else_opt ::=
        return self.delegate.p_case_else_opt_none(
            )
    def action_329(self):
        # case_else_opt ::= K_ELSE expression
        return self.delegate.p_case_else_opt_some(
            e = self.yystack[-1].minor,
            )
    def action_330(self):
        # literal ::= K_NULL
        return self.delegate.p_literal_null(
            )
    def action_331(self):
        # literal ::= L_INTEGER
        return self.delegate.p_literal_integer(
            i = self.yystack[-1].minor,
            )
    def action_332(self):
        # literal ::= L_FLOAT
        return self.delegate.p_literal_float(
            f = self.yystack[-1].minor,
            )
    def action_333(self):
        # literal ::= L_STRING
        return self.delegate.p_literal_string(
            s = self.yystack[-1].minor,
            )
    def action_334(self):
        # type ::= typename
        return self.delegate.p_type_name(
            n = self.yystack[-1].minor,
            )
    def action_335(self):
        # type ::= typename T_LROUND typearg T_RROUND
        return self.delegate.p_type_onearg(
            n = self.yystack[-4].minor,
            a = self.yystack[-2].minor,
            )
    def action_336(self):
        # type ::= typename T_LROUND typearg T_COMMA typearg T_RROUND
        return self.delegate.p_type_twoarg(
            n = self.yystack[-6].minor,
            a = self.yystack[-4].minor,
            b = self.yystack[-2].minor,
            )
    def action_337(self):
        # typename ::= L_NAME
        return self.delegate.p_typename_one(
            n = self.yystack[-1].minor,
            )
    def action_338(self):
        # typename ::= typename L_NAME
        return self.delegate.p_typename_many(
            tn = self.yystack[-2].minor,
            n = self.yystack[-1].minor,
            )
    def action_339(self):
        # typearg ::= L_INTEGER
        return self.delegate.p_typearg_unsigned(
            i = self.yystack[-1].minor,
            )
    def action_340(self):
        # typearg ::= T_PLUS L_INTEGER
        return self.delegate.p_typearg_positive(
            i = self.yystack[-1].minor,
            )
    def action_341(self):
        # typearg ::= T_MINUS L_INTEGER
        return self.delegate.p_typearg_negative(
            i = self.yystack[-1].minor,
            )
    yy_action_method = [
        action_000,
        action_001,
        action_002,
        action_003,
        action_004,
        action_005,
        action_006,
        action_007,
        action_008,
        action_009,
        action_010,
        action_011,
        action_012,
        action_013,
        action_014,
        action_015,
        action_016,
        action_017,
        action_018,
        action_019,
        action_020,
        action_021,
        action_022,
        action_023,
        action_024,
        action_025,
        action_026,
        action_027,
        action_028,
        action_029,
        action_030,
        action_031,
        action_032,
        action_033,
        action_034,
        action_035,
        action_036,
        action_037,
        action_038,
        action_039,
        action_040,
        action_041,
        action_042,
        action_043,
        action_044,
        action_045,
        action_046,
        action_047,
        action_048,
        action_049,
        action_050,
        action_051,
        action_052,
        action_053,
        action_054,
        action_055,
        action_056,
        action_057,
        action_058,
        action_059,
        action_060,
        action_061,
        action_062,
        action_063,
        action_064,
        action_065,
        action_066,
        action_067,
        action_068,
        action_069,
        action_070,
        action_071,
        action_072,
        action_073,
        action_074,
        action_075,
        action_076,
        action_077,
        action_078,
        action_079,
        action_080,
        action_081,
        action_082,
        action_083,
        action_084,
        action_085,
        action_086,
        action_087,
        action_088,
        action_089,
        action_090,
        action_091,
        action_092,
        action_093,
        action_094,
        action_095,
        action_096,
        action_097,
        action_098,
        action_099,
        action_100,
        action_101,
        action_102,
        action_103,
        action_104,
        action_105,
        action_106,
        action_107,
        action_108,
        action_109,
        action_110,
        action_111,
        action_112,
        action_113,
        action_114,
        action_115,
        action_116,
        action_117,
        action_118,
        action_119,
        action_120,
        action_121,
        action_122,
        action_123,
        action_124,
        action_125,
        action_126,
        action_127,
        action_128,
        action_129,
        action_130,
        action_131,
        action_132,
        action_133,
        action_134,
        action_135,
        action_136,
        action_137,
        action_138,
        action_139,
        action_140,
        action_141,
        action_142,
        action_143,
        action_144,
        action_145,
        action_146,
        action_147,
        action_148,
        action_149,
        action_150,
        action_151,
        action_152,
        action_153,
        action_154,
        action_155,
        action_156,
        action_157,
        action_158,
        action_159,
        action_160,
        action_161,
        action_162,
        action_163,
        action_164,
        action_165,
        action_166,
        action_167,
        action_168,
        action_169,
        action_170,
        action_171,
        action_172,
        action_173,
        action_174,
        action_175,
        action_176,
        action_177,
        action_178,
        action_179,
        action_180,
        action_181,
        action_182,
        action_183,
        action_184,
        action_185,
        action_186,
        action_187,
        action_188,
        action_189,
        action_190,
        action_191,
        action_192,
        action_193,
        action_194,
        action_195,
        action_196,
        action_197,
        action_198,
        action_199,
        action_200,
        action_201,
        action_202,
        action_203,
        action_204,
        action_205,
        action_206,
        action_207,
        action_208,
        action_209,
        action_210,
        action_211,
        action_212,
        action_213,
        action_214,
        action_215,
        action_216,
        action_217,
        action_218,
        action_219,
        action_220,
        action_221,
        action_222,
        action_223,
        action_224,
        action_225,
        action_226,
        action_227,
        action_228,
        action_229,
        action_230,
        action_231,
        action_232,
        action_233,
        action_234,
        action_235,
        action_236,
        action_237,
        action_238,
        action_239,
        action_240,
        action_241,
        action_242,
        action_243,
        action_244,
        action_245,
        action_246,
        action_247,
        action_248,
        action_249,
        action_250,
        action_251,
        action_252,
        action_253,
        action_254,
        action_255,
        action_256,
        action_257,
        action_258,
        action_259,
        action_260,
        action_261,
        action_262,
        action_263,
        action_264,
        action_265,
        action_266,
        action_267,
        action_268,
        action_269,
        action_270,
        action_271,
        action_272,
        action_273,
        action_274,
        action_275,
        action_276,
        action_277,
        action_278,
        action_279,
        action_280,
        action_281,
        action_282,
        action_283,
        action_284,
        action_285,
        action_286,
        action_287,
        action_288,
        action_289,
        action_290,
        action_291,
        action_292,
        action_293,
        action_294,
        action_295,
        action_296,
        action_297,
        action_298,
        action_299,
        action_300,
        action_301,
        action_302,
        action_303,
        action_304,
        action_305,
        action_306,
        action_307,
        action_308,
        action_309,
        action_310,
        action_311,
        action_312,
        action_313,
        action_314,
        action_315,
        action_316,
        action_317,
        action_318,
        action_319,
        action_320,
        action_321,
        action_322,
        action_323,
        action_324,
        action_325,
        action_326,
        action_327,
        action_328,
        action_329,
        action_330,
        action_331,
        action_332,
        action_333,
        action_334,
        action_335,
        action_336,
        action_337,
        action_338,
        action_339,
        action_340,
        action_341,
    ]


    def yy_reduce(self,     # The parser
                  yyruleno  # Number of the rule by which to reduce
                  ):
        '''Perform a reduce action and the shift that must immediately
        follow the reduce.'''
        
        if (self.yyTraceFILE and
            yyruleno >= 0 and yyruleno < len(self.yyRuleName)
            ):
            self.yyTraceFILE.write("%sReduce [%s].\n" % (
                self.yyTracePrompt, self.yyRuleName[yyruleno]))

        # get the action
        action = self.yy_action_method[yyruleno]

        # 'yygotominor' is the LHS of the rule reduced
        yygotominor = action(self)

        yygoto = self.yyRuleInfo[yyruleno].lhs   # The next state
        yysize = self.yyRuleInfo[yyruleno].nrhs  # Amount to pop the stack
        if yysize > 0:
            del self.yystack[-yysize:]

        # The next action
        yyact = self.yy_find_reduce_action(self.yystack[-1].stateno, yygoto)

        if yyact < self.YYNSTATE:
            self.yy_shift(yyact, yygoto, yygotominor)
        else:
            assert yyact == self.YYNSTATE + self.YYNRULE + 1
            self.yy_accept()

        return


    def yy_parse_failed(self):
        '''This method executes when the parse fails.'''

        if self.yyTraceFILE:
            self.yyTraceFILE.write("%sFail!\n" % self.yyTracePrompt)

        while self.yystack:
            self.yy_pop_parser_stack()

        self.delegate.parse_failed()

        return


    def yy_syntax_error(self, token):
        '''This method executes when a syntax error occurs.'''
        self.delegate.syntax_error(token)
        return


    def yy_accept(self):
        '''This method executes when the parser accepts.'''

        if self.yyTraceFILE:
            self.yyTraceFILE.write("%sAccept!\n" % self.yyTracePrompt)

        while self.yystack:
            self.yy_pop_parser_stack()

        self.delegate.accept()

        return


    def parse(self, tokens):
        for token in tokens:
            self.feed(token)
        self.feed((0, None))
        return


    def feed(self, token):
        '''The main parser routine.'''

        yymajor = token[0]  # The major token code number
        yyminor = token[1]  # The value for the token

        yyerrorhit = False  # True if yymajor has invoked an error

        # (re)initialize the parser, if necessary
        if not self.yystack:
            self.yyerrcnt = -1
            yytos = self.yyStackEntry(
                stateno = 0,
                major = 0,
                minor = None
                )
            self.yystack.append(yytos)

        yyendofinput = (yymajor == 0) # True if we are at the end of input
        
        if self.yyTraceFILE:
            self.yyTraceFILE.write(
                "%sInput %s\n" %
                (self.yyTracePrompt, self.yyTokenName[yymajor]))


        cond = True
        while cond:

            # The parser action.
            yyact = self.yy_find_shift_action(yymajor)

            YYNOCODE = self.YYNOCODE
            YYNSTATE = self.YYNSTATE
            YYNRULE  = self.YYNRULE

            if yyact < YYNSTATE:
                assert not yyendofinput, "Impossible to shift the $ token"
                self.yy_shift(yyact, yymajor, yyminor)
                self.yyerrcnt -= 1
                yymajor = YYNOCODE
            elif yyact < YYNSTATE + YYNRULE:
                self.yy_reduce(yyact - YYNSTATE)
            else:
                assert yyact == self.YY_ERROR_ACTION
                if self.yyTraceFILE:
                    self.yyTraceFILE.write(
                        "%sSyntax Error!\n" % self.yyTracePrompt)

                YYERRORSYMBOL = self.YYERRORSYMBOL
                if YYERRORSYMBOL is not None:
                    # A syntax error has occurred.
                    # The response to an error depends upon whether or not the
                    # grammar defines an error token "ERROR".  
                    #
                    # This is what we do if the grammar does define ERROR:
                    #
                    #  * Call the %syntax_error function.
                    #
                    #  * Begin popping the stack until we enter a state where
                    #    it is legal to shift the error symbol, then shift
                    #    the error symbol.
                    #
                    #  * Set the error count to three.
                    #
                    #  * Begin accepting and shifting new tokens.  No new error
                    #    processing will occur until three tokens have been
                    #    shifted successfully.
                    #
                    if self.yyerrcnt < 0:
                        self.yy_syntax_error(token)

                    yymx = self.yystack[-1].major
                    if yymx == YYERRORSYMBOL or yyerrorhit:
                        if self.yyTraceFILE:
                            self.yyTraceFILE.write(
                                "%sDiscard input token %s\n" % (
                                    self.yyTracePrompt,
                                    self.yyTokenName[yymajor]))
                        yymajor = YYNOCODE
                    else:
                        while self.yystack and yymx != YYERRORSYMBOL:
                            yyact = self.yy_find_reduce_action(
                                self.yystack[-1].stateno,
                                YYERRORSYMBOL
                                )
                            if yyact < YYNSTATE:
                                break
                            self.yy_pop_parser_stack()

                        if not self.yystack or yymajor == 0:
                            self.yy_parse_failed()
                            yymajor = YYNOCODE
                        elif yymx != YYERRORSYMBOL:
                            self.yy_shift(yyact, YYERRORSYMBOL, None)

                    self.yyerrcnt = 3
                    yyerrorhit = True

                else: # YYERRORSYMBOL is not defined
                    # This is what we do if the grammar does not define ERROR:
                    #
                    #  * Report an error message, and throw away the input token.
                    #
                    #  * If the input token is $, then fail the parse.
                    #
                    # As before, subsequent error messages are suppressed until
                    # three input tokens have been successfully shifted.
                    #
                    if self.yyerrcnt <= 0:
                        self.yy_syntax_error(token)

                    self.yyerrcnt = 3
                    if yyendofinput:
                        self.yy_parse_failed()

                    yymajor = YYNOCODE

            cond = yymajor != YYNOCODE and self.yystack

        return


