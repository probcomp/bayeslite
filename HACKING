Notes for anyone hacking bayeslite

* Automatic tests

Every commit on long-term branches including master should pass

   % ./check.sh

It builds bayeslite and runs the automatic smoke tests.  Please run this
in your .git/hooks/pre-commit script during development, and in each
commit please add or update automatic tests for any bugs you add or
features you fix in that commit.

check.sh has two modes: if you pass no arguments, it runs smoke tests
only. There are tests that are slower, use the network, or otherwise
are better suited to testing during continuous integration only. If
you run a particular test, e.g.:

  % ./check.sh --pdb tests/test_foo.py

that will run even the tests that would otherwise have been run during
continuous integration, for that file (and with --pdb it will drop you into the python debugger on the first failure). These tests are marked with
__ci_ in their names, and you can `git grep __ci_` to find them.

If you want to run all tests, you can

   % ./check.sh tests/ shell/tests

Because this may take awhile, we don't require it of all commits, but
you should monitor the continuous integration suite, and rapidly roll
back your change if it causes a failure.


* Versions

Our version scheme, compatible with PEP 440:

    <major>.<minor>[.<teeny>]a<date>    (prerelease snapshot)
    <major>.<minor>[.<teeny>]rc<N>      (release candidate)
    <major>.<minor>[.<teeny>]           (release)

We do not currently make any semantic API compatibility guarantees
about the meaning of <major>, <minor>, and <teeny>.

In the source tree, the VERSION file contains either the current
release version number, or the most recent tagged version number
followed by a plus sign `+'.  In that case, a suffix will be added to
the most recent version number, derived from `git describe', of the
form:

    .post<N>+g<commitid>[.<dirty>]

The Git tag for a tagged version is named with a `v' prefix.  Note
that the content of VERSION for any tagged version MUST NOT include a
`+' suffix, so that `cat VERSION' is sufficient to find the version
number, and `git describe' is not necessary.

To tag a new version:

1. Set VERSION to the new version, say `0.2.42':

    % echo 0.2.42 > VERSION
    % git commit -m 'Bump version to 0.2.42.' VERSION

2. Tag it with an annotated tag:

    % git tag -a -m v0.2.42 v0.2.42

   If you want, you can include release notes in the annotated tag
   message.

3. Append `+' to the version in VERSION:

    % echo 0.2.42+ > VERSION
    % git commit -m 'Bump version to 0.2.42+.' VERSION

Make sure when you push that you pass `--tags' to `git push'.

* SQL/BQL parameters

Use SQL/BQL parameters to pass strings and other values into SQL/BQL.
DO NOT use format strings.

DO:     cursor.execute('UPDATE foo SET x = ? WHERE id = ?', (x, id))
DON'T:  cursor.execute("UPDATE foo SET x = '%s' WHERE id = %d" % (x, id))
DON'T:  cursor.execute("UPDATE foo SET x = '{}' WHERE id = {}".format(x, id))

DO:     cursor.execute('SELECT x, y FROM t WHERE z = ?', (z,))
DON'T:  cursor.execute('SELECT x, y FROM t WHERE z = ?', z)
DON'T:  cursor.execute('SELECT x, y FROM t WHERE z = {}'.format(z))

Prefer named parameters if the query has more than one parameter and
covers multiple lines:

        cursor = db.cursor().execute('''
            SELECT COUNT(*)
                FROM bayesdb_generator AS g, bayesdb_column AS c
                WHERE g.id = :generator_id
                    AND g.tabname = c.tabname
                    AND c.colno = :colno
        ''', {
            'generator_id': generator_id,
            'colno': colno,
        })

If the tables and columns in the query are determined dynamically,
then use bql_quote_name and format strings to assemble SQL/BQL
queries.  But prefer to avoid this by writing different queries or
reusing subroutines that already do it, such as in bayeslite.core.

DO:     from bayeslite import bql_quote_name
        qt = bql_quote_name(table)
        qc = bql_quote_name(column)
        cursor.execute('SELECT %s FROM %s WHERE x = ?' % (qc, qt), (x,))

DON'T:  cursor.execute('SELECT %s FROM %s WHERE x = ?' % (column, table), (x,))
DON'T:  cursor.execute('SELECT %s FROM %s WHERE x = %d' % (qc, qt, x))

* Randomization

Avoid indiscriminate nondeterminism.

All random choices should be made from PRNGs with seeds that the user
can control, via the normal Python API and the bayeslite shell.  Any
actual nondeterminism should be clearly labelled as such, e.g. a
future shell command to choose a seed from /dev/urandom.

To write nondeterministic tests that explore an intentionally
unpredictable source of inputs, instead of testing exactly the same
input every time, write a deterministic function of a 32-byte seed and
use the @stochastic decorator to vary it:

    from stochastic import stochastic

    @stochastic(max_runs=4, min_passes=2)
    def test_quagga(seed):
        frobnicate(seed)

This defines test_quagga to be a function that accepts an *optional*
seed argument.  If you call it with zero arguments, then it will call
frobnicate up to four times, and if it does not pass twice, it will
raise a StochasticError that includes (a) the last exception with
which frobnicate failed and (b) the last seed with which frobnicate
failed.

You can then retry using exactly the same seed by calling test_quagga
manually with the seed as its argument:

    >>> test_quagga()
    StochasticError: [seed 434529bf3e5a16930701b55c39a90acfcd115ba0cada99f5af5448f3b96923dd]
    ZigException: something set us up the bomb
    >>> test_quagga('434529bf3e5a16930701b55c39a90acfcd115ba0cada99f5af5448f3b96923dd'.decode('hex'))
    ZigException: something set us up the bomb

* Python coding style

Generally follow PEP 8, with these exceptions:

- Single line between top-level definitions.
  => Two blank lines are needlessly verbose.
- Four spaces, instead of alignment, for continuation lines.
  => Using alignment penalizes descriptive function names and renaming.

Additional guidelines:

- General API should be exposed in the bayeslite module.
- General names should begin with the lexeme `bayesdb' or `bql'.
- Prefer greppable descriptive global functions over methods.
  => Legibility is more important than extensibility.
- Prefer single-quoted strings, except use """ for docstrings.
- unicode for user data; str for SQL/BQL text.
- Prefer clarity over boilerplate.
  => No need to clutter every docstring with a sphinx template.

* SQL updates

When issuing an UPDATE command to sqlite3, if you can count the number
of rows it should affect, do so and assert that it affected that many
rows:

    total_changes = bdb._sqlite3.totalchanges()
    bdb.sql_execute('UPDATE ...', (...))
    assert bdb._sqlite3.totalchanges() - total_changes == 1

XXX Should not use bdb.sqlite3 explicitly here.
XXX Not every use is so marked.
